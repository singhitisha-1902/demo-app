import { type ComponentPropsWithRef, type ReactElement, type ReactNode } from 'react';
import type { CDSPopoverPlacement, CDSPopoverSize, CDSPopoverVariant } from './';
export interface CDSPopoverProps extends Omit<ComponentPropsWithRef<'div'>, 'title'> {
    children: ReactElement;
    disabled?: boolean;
    offset?: number;
    open?: boolean;
    placement?: CDSPopoverPlacement;
    setOpen?: (value: boolean) => void;
    showArrow?: boolean;
    size?: CDSPopoverSize;
    title: ReactNode;
    variant?: CDSPopoverVariant;
    autoPlacement?: boolean;
    /**
     * This will preserve the tab order context based on the React tree instead of the DOM tree.
     * @default true
     */
    preserveTabOrder?: boolean;
    /**
     * Optionally specifies the root node, the portal container will be appended to.
     * @default null
     */
    root?: HTMLElement | null;
    updateOnAnimationFrame?: boolean;
}
declare const CDSPopover: import("react").ForwardRefExoticComponent<Omit<CDSPopoverProps, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
declare const CDSPopoverNamespace: import("react").ForwardRefExoticComponent<Omit<CDSPopoverProps, "ref"> & import("react").RefAttributes<HTMLDivElement>> & {
    Divider: import("react").ForwardRefExoticComponent<Omit<Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLHRElement>, HTMLHRElement>, "ref"> & {
        ref?: ((instance: HTMLHRElement | null) => void) | import("react").RefObject<HTMLHRElement> | null | undefined;
    }, "ref"> & import("react").RefAttributes<HTMLHRElement>>;
};
export { CDSPopoverNamespace as CDSPopover };
export default CDSPopover;
