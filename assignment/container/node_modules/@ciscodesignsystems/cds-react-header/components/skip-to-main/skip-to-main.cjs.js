'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var cdsComponentTypes = require('@ciscodesignsystems/cds-component-types');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var skipToMain_module = require('./skip-to-main.module.cjs.js');

const CDSSkipToMain = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    as: Component = 'a',
    label = 'Skip to main content',
    inputRef,
    ...rest
  } = props;
  const [isVisible, setIsVisible] = React.useState(false);
  const [isClicked, setIsClicked] = React.useState(false);
  const skipLinkRef = React.useRef(null);
  const mergedRef = cdsComponentTypes.useMergeRefs([skipLinkRef, ref]);
  const handleKeyUp = React.useCallback(event => {
    if (event.key === 'Tab' && !isClicked) {
      setIsVisible(true);
    }
  }, [isClicked]);
  React.useEffect(() => {
    document.addEventListener('keyup', handleKeyUp);
    return () => {
      document.removeEventListener('keyup', handleKeyUp);
    };
  }, [handleKeyUp]);
  React.useEffect(() => {
    const handleFirstTabPress = event => {
      if (event.key === 'Tab' && !isClicked) {
        if (skipLinkRef.current) {
          skipLinkRef.current.focus();
        }
        setIsVisible(true);
        window.removeEventListener('keydown', handleFirstTabPress);
      }
    };
    window.addEventListener('keydown', handleFirstTabPress);
    return () => {
      window.removeEventListener('keydown', handleFirstTabPress);
    };
  }, [isClicked, skipLinkRef]);
  const handleSkipToMainClick = () => {
    setIsClicked(true);
    setIsVisible(false);
  };
  const handleEnterClick = event => {
    if (event.key === 'Enter') {
      setIsClicked(true);
      setIsVisible(false);
    }
  };
  return isVisible ? jsxRuntime.jsx("div", {
    className: cdsComponentUtilities.cx(skipToMain_module["default"], 'cds-skip-to-main'),
    children: jsxRuntime.jsx(Component, {
      ...rest,
      className: cdsComponentUtilities.cx(skipToMain_module["default"], 'cds-skip-to-main__link'),
      onClick: handleSkipToMainClick,
      onKeyDown: handleEnterClick,
      ref: mergedRef,
      children: label
    })
  }) : null;
});
CDSSkipToMain.displayName = 'CDSSkipToMain';

exports.CDSSkipToMain = CDSSkipToMain;
exports["default"] = CDSSkipToMain;
