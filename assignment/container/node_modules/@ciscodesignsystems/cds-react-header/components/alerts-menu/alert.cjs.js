'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var phosphorReact = require('phosphor-react');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var headerMenu = require('../header-menu/header-menu.cjs.js');
var alert_module = require('./alert.module.cjs.js');

function isNotificationSentiment(text) {
  if (!text) {
    return false;
  }
  return text.toLowerCase() === 'negative' || text.toLowerCase() === 'warning' || text.toLowerCase() === 'severe-warning' || text.toLowerCase() === 'info' || text.toLowerCase() === 'positive';
}
const SENTIMENT_ICON_MAP = {
  negative: () => jsxRuntime.jsx(phosphorReact.WarningCircle, {
    className: cdsComponentUtilities.cx(alert_module["default"], 'cds-alert__negative'),
    weight: "fill",
    size: 23
  }),
  warning: () => jsxRuntime.jsx(phosphorReact.Warning, {
    className: cdsComponentUtilities.cx(alert_module["default"], 'cds-alert__warning'),
    weight: "fill",
    size: 23
  }),
  'severe-warning': () => jsxRuntime.jsx(phosphorReact.Warning, {
    className: cdsComponentUtilities.cx(alert_module["default"], 'cds-alert__severe-warning'),
    weight: "fill",
    size: 23
  }),
  info: () => jsxRuntime.jsx(phosphorReact.Info, {
    className: cdsComponentUtilities.cx(alert_module["default"], 'cds-alert__info'),
    weight: "fill",
    size: 23
  }),
  positive: () => jsxRuntime.jsx(phosphorReact.CheckCircle, {
    className: cdsComponentUtilities.cx(alert_module["default"], 'cds-alert__positive'),
    weight: "fill",
    size: 23
  })
};
const CDSAlert = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    children,
    headline,
    leftGutter,
    rightGutter,
    sentiment,
    ...rest
  } = props;
  const SentimentIcon = isNotificationSentiment(sentiment) ? SENTIMENT_ICON_MAP[sentiment] : null;
  return jsxRuntime.jsxs(headerMenu.CDSHeaderMenuRow, {
    ref: ref,
    className: cdsComponentUtilities.cx(alert_module["default"], 'cds-alert__alert-row'),
    ...rest,
    children: [jsxRuntime.jsx("div", {
      className: cdsComponentUtilities.cx(alert_module["default"], 'cds-alert__alert-row-gutter cds-alert__alert-row-gutter--left'),
      children: SentimentIcon ? jsxRuntime.jsx(SentimentIcon, {}) : leftGutter
    }), jsxRuntime.jsxs("div", {
      className: cdsComponentUtilities.cx(alert_module["default"], 'cds-alert__alert-row-content'),
      children: [headline && jsxRuntime.jsx(CDSAlertHeadline, {
        children: headline
      }), children]
    }), rightGutter ? jsxRuntime.jsx("div", {
      className: cdsComponentUtilities.cx(alert_module["default"], 'cds-alert__alert-row-gutter cds-alert__alert-row-gutter--right'),
      children: rightGutter
    }) : null]
  });
});
CDSAlert.displayName = 'CDSAlert';
CDSAlert.defaultProps = {
  headline: undefined,
  sentiment: undefined,
  rightGutter: undefined,
  leftGutter: undefined
};
const CDSAlertHeadline = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    children,
    ...rest
  } = props;
  return jsxRuntime.jsx("div", {
    className: cdsComponentUtilities.cx(alert_module["default"], 'cds-alert__alert-row-headline'),
    ref: ref,
    ...rest,
    children: children
  });
});
CDSAlertHeadline.displayName = 'CDSAlertHeadline';
const CDSAlertLink = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    children,
    ...rest
  } = props;
  return jsxRuntime.jsx("a", {
    className: cdsComponentUtilities.cx(alert_module["default"], 'cds-alert__alert-row-link'),
    ref: ref,
    ...rest,
    children: children
  });
});
CDSAlertLink.displayName = 'CDSAlertLink';

exports.CDSAlert = CDSAlert;
exports.CDSAlertHeadline = CDSAlertHeadline;
exports.CDSAlertLink = CDSAlertLink;
