import { type ElementType, type FC, type ReactElement, type ReactNode } from 'react';
import type { PolymorphicComponentPropWithRef, TSentiment } from '@ciscodesignsystems/cds-component-types';
import type { TTenantSwitcherTypes } from '../../types/src';
type TTenantSwitcher<C extends ElementType> = PolymorphicComponentPropWithRef<C, {
    /**
     * The tenant switcher type to display
     */
    switcherType?: TTenantSwitcherTypes;
    /**
     * The username to display in the tenant switcher menu.
     * Accepts `string` and `ReactNode` so that products can pass
     * components in to handle custom truncation
     */
    userName?: string | ReactNode;
    /**
     * The tenant name to display in the tenant switcher menu.
     * Accepts `string` and `ReactNode` so that products can pass
     * components in to handle custom truncation
     */
    tenantName?: string | ReactNode;
    /**
     * The sentiment of the tenant switcher
     */
    sentiment?: TSentiment;
    /**
     * Width at which the name and tenant name in the tenant menu will truncate with ellipsis
     */
    width?: string;
    /**
     * Specify whether the caret icon will toggle when the component is clicked
     */
    toggleCaret?: boolean;
}>;
type CDSTenantSwitcherComponent = FC & (<C extends ElementType = 'button'>(props: TTenantSwitcher<C>) => ReactElement | null);
export declare const CDSTenantSwitcher: CDSTenantSwitcherComponent;
export default CDSTenantSwitcher;
