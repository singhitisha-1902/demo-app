import { type ElementType, type ReactNode } from 'react';
import type { As, Either, TSentimentGradient } from '@ciscodesignsystems/cds-component-types';
import { type CDSHeaderLogoLinkProps } from './components/header-logo-link';
export type CDSHeaderProps = {
    /**
     * The HTML tag to be used as root for CDSHeader.
     */
    as?: As<any>;
    /**
     * Background sentiment for the header. Brand has stipulated that this can currently only be set to inverse (gray).
     */
    sentiment?: TSentimentGradient;
    /**
     * Toggle the gradient for the header.
     */
    gradient?: boolean;
    /**
     * The name of the product to display in the header.
     */
    title?: ReactNode | string;
    /**
     * The logo to display in the header. This should be the Cisco logo in most cases.
     */
    logo: ReactNode;
    /**
     * The max width of the menu container. This is a temporary solution until the header is made responsive.
     */
    minWidth?: string;
    children: ReactNode;
    className?: string;
} & Either<{
    /**
     * Where the logo and product title should link to. Cannot be used with `logoLinkProps`.
     * Note: The use of `logoLink` prop in the `CDSHeader` component is deprecated and will be removed in a future release of CDS. Please use `logoLinkProps` instead.
     */
    logoLink: string;
    /**
     * The target for the logoLink. Cannot be used with `logoLinkProps`.
     * Note: The use of `logoLinkTarget` prop in the `CDSHeader` component is deprecated and will be removed in a future release of CDS. Please use `logoLinkProps` instead.
     */
    logoLinkTarget?: string;
}, {
    /**
     * The prop list to be passed to CDSHeader logo link to avail the `Polymorphic functionality`. Cannot be used with `logoLink` & `logoLinkTarget` props.
     */
    logoLinkProps?: Omit<CDSHeaderLogoLinkProps<ElementType>, 'children'>;
}>;
export declare const CDSHeader: import("react").ForwardRefExoticComponent<CDSHeaderProps & import("react").RefAttributes<HTMLElement>>;
