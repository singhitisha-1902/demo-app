import { forwardRef } from 'react';
import * as RadixNavMenu from '@radix-ui/react-navigation-menu';
import { cx } from '@ciscodesignsystems/cds-component-utilities';
import styles from './header-menu.module.esm.js';
import { jsx, jsxs } from 'react/jsx-runtime';

let sanitizedRadixNavMenu = {
  default: undefined,
  ...RadixNavMenu
};
// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
sanitizedRadixNavMenu = sanitizedRadixNavMenu.default ?? sanitizedRadixNavMenu;
const {
  Root,
  List,
  Item,
  Trigger,
  Content,
  Link
} = sanitizedRadixNavMenu;
/**
 * Root - parent of all compound components
 */
const CDSHeaderMenuRoot = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    id,
    children,
    trigger,
    containerMaxWidth,
    flex,
    ...rest
  } = props;
  return /*#__PURE__*/jsx(Root, {
    ref: ref,
    ...rest,
    className: cx(styles, 'cds-header-menu'),
    id: id,
    "data-testid": id,
    style: {
      maxWidth: containerMaxWidth,
      flex: flex
    },
    children: /*#__PURE__*/jsx(List, {
      children: /*#__PURE__*/jsxs(Item, {
        children: [/*#__PURE__*/jsx(Trigger, {
          asChild: true
          // Prevent menu from opening when mouse enters
          // in order to match Magnetic behavior
          ,
          onPointerMove: event => event.preventDefault(),
          onPointerLeave: event => event.preventDefault(),
          children: trigger
        }), children]
      })
    })
  });
});
CDSHeaderMenuRoot.displayName = 'CDSHeaderMenuRoot';
CDSHeaderMenuRoot.defaultProps = {
  containerMaxWidth: undefined,
  flex: undefined
};
/**
 * Content - child of the root
 */
const CDSHeaderMenuContent = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    children,
    ...rest
  } = props;
  return /*#__PURE__*/jsx(Content, {
    ref: ref
    // Keeps the content open when mouse leaves
    // the opened menu
    ,
    onPointerLeave: e => {
      e.preventDefault();
    },
    ...rest,
    children: /*#__PURE__*/jsx(List, {
      children: children
    })
  });
});
CDSHeaderMenuContent.displayName = 'CDSHeaderMenuContent';
CDSHeaderMenuContent.defaultProps = {
  align: undefined
};

/**
 * Content Title - a list item styled as a title
 */
const CDSHeaderMenuContentTitle = /*#__PURE__*/forwardRef((props, ref) => {
  return /*#__PURE__*/jsx(CDSHeaderMenuRow, {
    ref: ref,
    className: cx(styles, 'cds-header-menu__title'),
    ...props
  });
});
CDSHeaderMenuContentTitle.displayName = 'CDSHeaderMenuContentTitle';

/**
 * List item - parent component for a HeaderMenuLink or a nested HeaderMenuList
 */
// eslint-disable-next-line

const CDSHeaderMenuRow = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    children,
    ...rest
  } = props;
  return /*#__PURE__*/jsx(Item, {
    ref: ref,
    "data-cds-header-menu-row": true,
    ...rest,
    children: children
  });
});
CDSHeaderMenuRow.displayName = 'CDSHeaderMenuRow';

/**
 * Link - child component of a HeaderMenuListItem
 */
const CDSHeaderMenuLink = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    children,
    ...rest
  } = props;
  return /*#__PURE__*/jsx(Link, {
    ref: ref,
    "data-cds-header-menu-link": true,
    ...rest,
    children: children
  });
});
CDSHeaderMenuLink.displayName = 'CDSHeaderMenuLink';

export { CDSHeaderMenuContent, CDSHeaderMenuContentTitle, CDSHeaderMenuLink, CDSHeaderMenuRoot, CDSHeaderMenuRow };
