'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var RadixNavMenu = require('@radix-ui/react-navigation-menu');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var headerMenu_module = require('./header-menu.module.cjs.js');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n["default"] = e;
  return Object.freeze(n);
}

var RadixNavMenu__namespace = /*#__PURE__*/_interopNamespace(RadixNavMenu);

var _a;
// Radix packages don't support ESM in Node, in some scenarios(e.g. SSR),
// the module will be imported as CommonJS module, in which we have to reference the `default`
let sanitizedRadixNavMenu = {
  default: undefined,
  ...RadixNavMenu__namespace
};
// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment
sanitizedRadixNavMenu = (_a = sanitizedRadixNavMenu.default) !== null && _a !== void 0 ? _a : sanitizedRadixNavMenu;
const {
  Root,
  List,
  Item,
  Trigger,
  Content,
  Link
} = sanitizedRadixNavMenu;
/**
 * Root - parent of all compound components
 */
const CDSHeaderMenuRoot = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    id,
    children,
    trigger,
    containerMaxWidth,
    flex,
    ...rest
  } = props;
  return jsxRuntime.jsx(Root, {
    ref: ref,
    ...rest,
    className: cdsComponentUtilities.cx(headerMenu_module["default"], 'cds-header-menu'),
    id: id,
    "data-testid": id,
    style: {
      maxWidth: containerMaxWidth,
      flex: flex
    },
    children: jsxRuntime.jsx(List, {
      children: jsxRuntime.jsxs(Item, {
        children: [jsxRuntime.jsx(Trigger, {
          asChild: true,
          // Prevent menu from opening when mouse enters
          // in order to match Magnetic behavior
          onPointerMove: event => event.preventDefault(),
          onPointerLeave: event => event.preventDefault(),
          children: trigger
        }), children]
      })
    })
  });
});
CDSHeaderMenuRoot.displayName = 'CDSHeaderMenuRoot';
CDSHeaderMenuRoot.defaultProps = {
  containerMaxWidth: undefined,
  flex: undefined
};
/**
 * Content - child of the root
 */
const CDSHeaderMenuContent = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    children,
    ...rest
  } = props;
  return jsxRuntime.jsx(Content, {
    ref: ref,
    // Keeps the content open when mouse leaves
    // the opened menu
    onPointerLeave: e => {
      e.preventDefault();
    },
    ...rest,
    children: jsxRuntime.jsx(List, {
      children: children
    })
  });
});
CDSHeaderMenuContent.displayName = 'CDSHeaderMenuContent';
CDSHeaderMenuContent.defaultProps = {
  align: undefined
};
/**
 * Content Title - a list item styled as a title
 */
const CDSHeaderMenuContentTitle = /*#__PURE__*/React.forwardRef((props, ref) => {
  return jsxRuntime.jsx(CDSHeaderMenuRow, {
    ref: ref,
    className: cdsComponentUtilities.cx(headerMenu_module["default"], 'cds-header-menu__title'),
    ...props
  });
});
CDSHeaderMenuContentTitle.displayName = 'CDSHeaderMenuContentTitle';
const CDSHeaderMenuRow = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    children,
    ...rest
  } = props;
  return jsxRuntime.jsx(Item, {
    ref: ref,
    "data-cds-header-menu-row": true,
    ...rest,
    children: children
  });
});
CDSHeaderMenuRow.displayName = 'CDSHeaderMenuRow';
/**
 * Link - child component of a HeaderMenuListItem
 */
const CDSHeaderMenuLink = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    children,
    ...rest
  } = props;
  return jsxRuntime.jsx(Link, {
    ref: ref,
    "data-cds-header-menu-link": true,
    ...rest,
    children: children
  });
});
CDSHeaderMenuLink.displayName = 'CDSHeaderMenuLink';

exports.CDSHeaderMenuContent = CDSHeaderMenuContent;
exports.CDSHeaderMenuContentTitle = CDSHeaderMenuContentTitle;
exports.CDSHeaderMenuLink = CDSHeaderMenuLink;
exports.CDSHeaderMenuRoot = CDSHeaderMenuRoot;
exports.CDSHeaderMenuRow = CDSHeaderMenuRow;
