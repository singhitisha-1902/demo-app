'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var React = require('react');
var phosphorReact = require('phosphor-react');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var injected = require('@ciscodesignsystems/cds-react-button/injected');
var headerBadge = require('../header-badge/header-badge.cjs.js');
var headerMenu = require('../header-menu/header-menu.cjs.js');
var alertsMenu_module = require('./alerts-menu.module.cjs.js');

/**
 * The most-parent element of the alerts widget
 */
const CDSAlertsMenuRoot = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    sentiment,
    variant,
    children,
    contentRef,
    alertCount,
    alertNumber,
    alertThreshold,
    alertThresholdSymbol,
    triggerRef
  } = props;
  const getBadgeString = () => {
    if (alertNumber && alertThreshold && alertNumber > alertThreshold) {
      return `${alertThreshold}${alertThresholdSymbol}`;
    } else {
      if (alertNumber) return alertNumber;
      return undefined;
    }
  };
  const showHeaderBadge = alertCount && getBadgeString() !== undefined;
  return jsxRuntime.jsx(headerMenu.CDSHeaderMenuRoot, {
    ref: ref,
    id: "headerAlertsMenu",
    "aria-label": "Alerts menu",
    trigger: jsxRuntime.jsx(injected.CDSButton, {
      ref: triggerRef,
      sentiment: sentiment,
      variant: variant,
      icon: jsxRuntime.jsx(phosphorReact.Bell, {
        weight: "bold",
        size: "24px"
      }),
      "aria-label": "Alerts content",
      className: cdsComponentUtilities.cx(alertsMenu_module["default"], 'cds-alerts-menu-trigger'),
      children: showHeaderBadge && jsxRuntime.jsx(headerBadge.CDSHeaderBadge, {
        content: getBadgeString(),
        sentiment: "negative"
      })
    }),
    children: jsxRuntime.jsx(headerMenu.CDSHeaderMenuContent, {
      className: cdsComponentUtilities.cx(alertsMenu_module["default"], 'cds-alerts-menu'),
      align: "left",
      ref: contentRef,
      children: children
    })
  });
});
CDSAlertsMenuRoot.displayName = 'CDSAlertsMenuRoot';
/**
 * Divider that goes between rows of content
 */
const CDSAlertsMenuDivider = /*#__PURE__*/React.forwardRef((props, ref) => {
  return jsxRuntime.jsx("hr", {
    className: cdsComponentUtilities.cx(alertsMenu_module["default"], 'cds-alerts-menu__divider'),
    ref: ref,
    ...props
  });
});
CDSAlertsMenuDivider.displayName = 'CDSAlertsMenuDivider';
/**
 * Content that goes at the bottom of the Alerts Menu
 */
const CDSAlertsMenuFooter = /*#__PURE__*/React.forwardRef((props, ref) => {
  const {
    children,
    ...rest
  } = props;
  return jsxRuntime.jsx(headerMenu.CDSHeaderMenuRow, {
    ref: ref,
    className: cdsComponentUtilities.cx(alertsMenu_module["default"], 'cds-alerts-menu__footer'),
    ...rest,
    children: children
  });
});
CDSAlertsMenuFooter.displayName = 'CDSAlertsMenuFooter';
CDSAlertsMenuRoot.defaultProps = {
  sentiment: 'inverse',
  variant: 'ghost',
  alertCount: true,
  alertNumber: undefined,
  alertThreshold: 99,
  alertThresholdSymbol: '+',
  contentRef: undefined,
  triggerRef: undefined
};

exports.CDSAlertsMenuDivider = CDSAlertsMenuDivider;
exports.CDSAlertsMenuFooter = CDSAlertsMenuFooter;
exports.CDSAlertsMenuRoot = CDSAlertsMenuRoot;
exports["default"] = CDSAlertsMenuRoot;
