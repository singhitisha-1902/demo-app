import { forwardRef, useMemo } from 'react';
import { Info } from 'phosphor-react';
import { cx } from '@ciscodesignsystems/cds-component-utilities';
import { CDSFlex } from '@ciscodesignsystems/cds-react-flex/injected';
import { CDSText } from '@ciscodesignsystems/cds-react-text/injected';
import { CDSTooltip } from '@ciscodesignsystems/cds-react-tooltip/injected';
import { CDSLabelSizeMap } from './types/index.esm.js';
import styles from './label.module.esm.js';
import { jsx, jsxs } from 'react/jsx-runtime';

const CDSLabel = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    children,
    className,
    disabled,
    infoMessage,
    optional,
    required,
    size = 'md',
    weight = 'bold',
    tooltipPlacement,
    ...rest
  } = props;
  const textSize = useMemo(() => CDSLabelSizeMap[size], [size]);
  const optionalText = typeof optional === 'string' ? optional : 'optional';
  const labelClasses = cx(styles, 'cds-label', `cds-label--${size}`, {
    'cds-label--disabled': disabled
  }, className);
  return /*#__PURE__*/jsx(CDSText, {
    ...rest,
    className: labelClasses,
    weight: weight,
    ref: ref,
    as: "label",
    size: textSize,
    children: /*#__PURE__*/jsxs(CDSFlex, {
      align: "center",
      gap: "xxs",
      children: [children, required && /*#__PURE__*/jsx("span", {
        className: cx(styles, 'cds-label__asterisk'),
        "aria-label": "required",
        children: "*"
      }), optional && !required && /*#__PURE__*/jsxs("span", {
        className: cx(styles, 'cds-label__optional'),
        children: ["(", optionalText, ")"]
      }), infoMessage && /*#__PURE__*/jsx(CDSTooltip, {
        title: infoMessage,
        placement: tooltipPlacement,
        children: /*#__PURE__*/jsx(Info, {
          weight: "bold"
        })
      })]
    })
  });
});
CDSLabel.displayName = 'CDSLabel';
CDSLabel.defaultProps = {
  disabled: false,
  infoMessage: '',
  optional: false,
  required: false,
  tooltipPlacement: 'top'
};

export { CDSLabel, CDSLabel as default };
