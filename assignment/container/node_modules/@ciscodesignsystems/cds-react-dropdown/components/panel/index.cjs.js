'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var react$1 = require('@floating-ui/react');
var framerMotion = require('framer-motion');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var useSize = require('../../util/hooks/use-size.cjs.js');
var panelContext = require('../../util/panel-context.cjs.js');
var panel_module = require('./panel.module.cjs.js');

const CDSDropdownPanel = ({
  activeIndex,
  allowHover,
  children,
  context,
  getFloatingProps,
  getItemProps,
  isNested,
  isOpen,
  listItemsRef,
  refs,
  setActiveIndex,
  strategy,
  tree,
  x,
  y,
  className = '',
  root = undefined
}) => {
  const size = useSize.useSize();
  const classNames = cdsComponentUtilities.cx(panel_module["default"], 'cds-dropdown', `cds-dropdown--${size}`, className);
  const dropdownPanelContext = react.useMemo(() => ({
    activeIndex,
    allowHover,
    tree,
    isOpen,
    setActiveIndex,
    getItemProps
  }), [activeIndex, allowHover, getItemProps, isOpen, setActiveIndex, tree]);
  return jsxRuntime.jsx(react$1.FloatingPortal, {
    ...(root ? {
      root
    } : {}),
    children: jsxRuntime.jsx(react$1.FloatingList, {
      elementsRef: listItemsRef,
      children: jsxRuntime.jsx(panelContext.DropdownPanelContext.Provider, {
        value: dropdownPanelContext,
        children: jsxRuntime.jsx(framerMotion.LazyMotion, {
          features: framerMotion.domAnimation,
          children: isOpen && jsxRuntime.jsx(react$1.FloatingFocusManager, {
            context: context,
            // Only initially focus the root floating menu.
            initialFocus: isNested ? -1 : refs.floating,
            // Prevent outside content interference.
            modal: false,
            // Only return focus to the root menu's reference when menus close.
            returnFocus: !isNested,
            children: jsxRuntime.jsx(framerMotion.m.div, {
              animate: {
                opacity: 1,
                translateY: 0
              },
              exit: {
                opacity: 0,
                translateY: -16
              },
              initial: {
                opacity: 0,
                translateY: -16
              },
              transition: {
                type: 'keyframes',
                duration: 0.1
              },
              ...getFloatingProps(),
              className: classNames,
              ref: refs.setFloating,
              style: {
                position: strategy,
                top: y !== null && y !== void 0 ? y : 0,
                left: x !== null && x !== void 0 ? x : 0,
                width: 'max-content'
              },
              ...getFloatingProps(),
              children: children
            })
          })
        })
      })
    })
  });
};
CDSDropdownPanel.displayName = 'CDSDropdownPanel';

exports.CDSDropdownPanel = CDSDropdownPanel;
exports["default"] = CDSDropdownPanel;
