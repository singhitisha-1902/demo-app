'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var react$1 = require('@floating-ui/react');
var phosphorReact = require('phosphor-react');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var cdsReactButton = require('@ciscodesignsystems/cds-react-button');
var useMenu = require('../../util/hooks/use-menu.cjs.js');
var useSize = require('../../util/hooks/use-size.cjs.js');
var index = require('../panel/index.cjs.js');
var root_module = require('./root.module.cjs.js');

const CDSDropdownRoot = /*#__PURE__*/react.forwardRef(({
  children,
  label,
  className,
  open,
  onChange,
  defaultOpen,
  root,
  ...props
}, ref) => {
  var _a;
  const {
    activeIndex,
    allowHover,
    context,
    getFloatingProps,
    getItemProps,
    getReferenceProps,
    isNested,
    isOpen,
    listItemsRef,
    nodeId,
    refs,
    setActiveIndex,
    strategy,
    tree,
    x,
    y
  } = useMenu.useMenu({
    open,
    onChange,
    defaultOpen
  });
  const buttonRef = react.useRef(null);
  const referenceRef = react$1.useMergeRefs([refs.setReference, buttonRef, ref]);
  const rootRef = root !== null && root !== void 0 ? root : (_a = buttonRef.current) === null || _a === void 0 ? void 0 : _a.parentElement;
  const size = useSize.useSize();
  const iconSize = size === 'sm' ? 14 : 16;
  const rightIcon = label ? jsxRuntime.jsx(phosphorReact.CaretDown, {
    size: iconSize,
    className: isOpen ? cdsComponentUtilities.cx(root_module["default"], 'cds-dropdown__trigger-indicator--open') : ''
  }) : null;
  return jsxRuntime.jsxs(react$1.FloatingNode, {
    id: nodeId,
    children: [jsxRuntime.jsx(cdsReactButton.CDSButton, {
      ref: referenceRef,
      rightIcon: rightIcon,
      className: cdsComponentUtilities.cx(root_module["default"], 'cds-dropdown-trigger'),
      size: size,
      ...props,
      ...getReferenceProps(),
      children: label
    }), jsxRuntime.jsx(index.CDSDropdownPanel, {
      className: className,
      activeIndex: activeIndex,
      allowHover: allowHover,
      context: context,
      getFloatingProps: getFloatingProps,
      getItemProps: getItemProps,
      isNested: isNested,
      isOpen: isOpen,
      listItemsRef: listItemsRef,
      refs: refs,
      setActiveIndex: setActiveIndex,
      strategy: strategy,
      tree: tree,
      x: x,
      y: y,
      root: rootRef,
      children: children
    })]
  });
});
CDSDropdownRoot.displayName = 'CDSDropdownRoot';

exports.CDSDropdownRoot = CDSDropdownRoot;
exports["default"] = CDSDropdownRoot;
