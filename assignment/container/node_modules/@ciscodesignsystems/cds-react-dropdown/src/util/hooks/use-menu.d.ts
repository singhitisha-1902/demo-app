import { type Dispatch, type MutableRefObject, type SetStateAction } from 'react';
import { type UseFloatingReturn, useFloatingTree, type useInteractions } from '@floating-ui/react';
type UseMenuProps = {
    open?: boolean;
    defaultOpen?: boolean;
    onChange?: (value: boolean) => void;
};
type UseMenuReturn = {
    activeIndex: number | null;
    allowHover: boolean;
    context: UseFloatingReturn<HTMLButtonElement>['context'];
    getFloatingProps: ReturnType<typeof useInteractions>['getFloatingProps'];
    getItemProps: ReturnType<typeof useInteractions>['getItemProps'];
    getReferenceProps: ReturnType<typeof useInteractions>['getReferenceProps'];
    isNested: boolean;
    isOpen: boolean;
    listItemsRef: MutableRefObject<(HTMLElement | null)[]>;
    nodeId: string;
    refs: UseFloatingReturn<HTMLButtonElement>['refs'];
    setActiveIndex: Dispatch<SetStateAction<number | null>>;
    setAllowHover: Dispatch<SetStateAction<boolean>>;
    strategy: UseFloatingReturn<HTMLButtonElement>['strategy'];
    tree: ReturnType<typeof useFloatingTree>;
    x: number | null;
    y: number | null;
};
export declare const useMenu: ({ open, onChange, defaultOpen }: UseMenuProps) => UseMenuReturn;
export {};
