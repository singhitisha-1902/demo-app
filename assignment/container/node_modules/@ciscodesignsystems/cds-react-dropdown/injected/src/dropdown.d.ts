import { type ComponentPropsWithRef, type ReactNode } from 'react';
import type { Either } from '@ciscodesignsystems/cds-component-types';
import { type CDSButtonProps } from '@ciscodesignsystems/cds-react-button';
import type { CDSDropdownPlacement, CDSDropdownSize } from './types';
export type CDSDropdownProps = {
    /**
     * This is where you want to insert `CDSDropdown.`-prefixed contextual components in order to create your dropdown menu.
     *
     * Usage example:
     *
     * ```tsx
     * <CDSDropdown label="Label">
     *   <CDSDropdown.Section label="Section title" divider={true}>
     *     <CDSDropdown.Item label="Item 1" />
     *   <CDSDropdown.Section />
     *   <CDSDropdown.Section label="Section title" />
     *     <CDSDropdown.Item label="Item 2" />
     *   <CDSDropdown.Section />
     * </CDSDropdown>
     * ```
     */
    children: ReactNode;
    /**
     * Determines the label that appears on the trigger for the dropdown menu.
     */
    label?: string;
    /**
     * Determines the floating anchor for the menu.
     *
     * Allows for `"left"` or `"right"`.
     *
     * Defaults to `"left"`.
     */
    placement?: CDSDropdownPlacement;
    /**
     * Determines the size of trigger, menu, menu label and menu items.
     *
     * Allows for `"sm"` or `"md"`.
     *
     * Defaults to `"md"`.
     */
    size?: CDSDropdownSize;
    /**
     * Function that will be called when the dropdown is toggled.
     */
    onChange?: (value: boolean) => void;
    /**
     * Optionally specifies the root node the portal container will be appended to
     */
    root?: HTMLElement | null;
} & Either<{
    /**
     * Open state for the dropdown. Cannot be used with defaultOpen.
     */
    open?: boolean;
}, {
    /**
     * Default state for the dropdown. Cannot be used with open.
     */
    defaultOpen?: boolean;
}> & ComponentPropsWithRef<'button'> & Pick<CDSButtonProps<'button'>, 'destructive' | 'icon' | 'variant' | 'disabled'>;
declare const CDSDropdownNamespace: import("react").ForwardRefExoticComponent<(Omit<{
    /**
     * This is where you want to insert `CDSDropdown.`-prefixed contextual components in order to create your dropdown menu.
     *
     * Usage example:
     *
     * ```tsx
     * <CDSDropdown label="Label">
     *   <CDSDropdown.Section label="Section title" divider={true}>
     *     <CDSDropdown.Item label="Item 1" />
     *   <CDSDropdown.Section />
     *   <CDSDropdown.Section label="Section title" />
     *     <CDSDropdown.Item label="Item 2" />
     *   <CDSDropdown.Section />
     * </CDSDropdown>
     * ```
     */
    children: ReactNode;
    /**
     * Determines the label that appears on the trigger for the dropdown menu.
     */
    label?: string | undefined;
    /**
     * Determines the floating anchor for the menu.
     *
     * Allows for `"left"` or `"right"`.
     *
     * Defaults to `"left"`.
     */
    placement?: "left" | "right" | undefined;
    /**
     * Determines the size of trigger, menu, menu label and menu items.
     *
     * Allows for `"sm"` or `"md"`.
     *
     * Defaults to `"md"`.
     */
    size?: "sm" | "md" | undefined;
    /**
     * Function that will be called when the dropdown is toggled.
     */
    onChange?: ((value: boolean) => void) | undefined;
    /**
     * Optionally specifies the root node the portal container will be appended to
     */
    root?: HTMLElement | null | undefined;
} & {
    open?: boolean | undefined;
} & {
    defaultOpen?: undefined;
} & Omit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | import("react").RefObject<HTMLButtonElement> | null | undefined;
} & Pick<CDSButtonProps<"button">, "disabled" | "variant" | "destructive" | "icon">, "ref"> | Omit<{
    /**
     * This is where you want to insert `CDSDropdown.`-prefixed contextual components in order to create your dropdown menu.
     *
     * Usage example:
     *
     * ```tsx
     * <CDSDropdown label="Label">
     *   <CDSDropdown.Section label="Section title" divider={true}>
     *     <CDSDropdown.Item label="Item 1" />
     *   <CDSDropdown.Section />
     *   <CDSDropdown.Section label="Section title" />
     *     <CDSDropdown.Item label="Item 2" />
     *   <CDSDropdown.Section />
     * </CDSDropdown>
     * ```
     */
    children: ReactNode;
    /**
     * Determines the label that appears on the trigger for the dropdown menu.
     */
    label?: string | undefined;
    /**
     * Determines the floating anchor for the menu.
     *
     * Allows for `"left"` or `"right"`.
     *
     * Defaults to `"left"`.
     */
    placement?: "left" | "right" | undefined;
    /**
     * Determines the size of trigger, menu, menu label and menu items.
     *
     * Allows for `"sm"` or `"md"`.
     *
     * Defaults to `"md"`.
     */
    size?: "sm" | "md" | undefined;
    /**
     * Function that will be called when the dropdown is toggled.
     */
    onChange?: ((value: boolean) => void) | undefined;
    /**
     * Optionally specifies the root node the portal container will be appended to
     */
    root?: HTMLElement | null | undefined;
} & {
    defaultOpen?: boolean | undefined;
} & {
    open?: undefined;
} & Omit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | import("react").RefObject<HTMLButtonElement> | null | undefined;
} & Pick<CDSButtonProps<"button">, "disabled" | "variant" | "destructive" | "icon">, "ref">) & import("react").RefAttributes<HTMLButtonElement>> & {
    /**
     * The basic building block of dropdown menus, this creates an item that can be clicked to trigger an action.
     *
     * Usage example:
     *
     * ```tsx
     * <CDSDropdown label="Label">
     *   <CDSDropdown.Item label="Option 1" onClick={handleOnFoo} />
     *   <CDSDropdown.Item label="Option 2" onClick={handleOnBar} />
     * </CDSDropdown>
     * ```
     */
    Item: import("react").ForwardRefExoticComponent<Omit<import("./components/item").CDSDropdownItemProps, "ref"> & import("react").RefAttributes<HTMLButtonElement>>;
    /**
     * Allows for the creation of cascading or sub-menus.
     *
     * Usage example:
     *
     * ```tsx
     * <CDSDropdown label="Label">
     *   <CDSDropdown.Item label="Option 1" />
     *   <CDSDropdown.Item label="Option 2" />
     *   <CDSDropdown.Submenu label="Submenu">
     *     <CDSDropdown.Item label="Option 3" />
     *     <CDSDropdown.Item label="Option 4" />
     *   </CDSDropdown.Submenu>
     * </CDSDropdown>
     * ```
     */
    Submenu: import("react").ForwardRefExoticComponent<Omit<import("./components/submenu").CDSDropdownSubmenuProps, "ref"> & import("react").RefAttributes<HTMLButtonElement>>;
    /**
     * Allows for the creation of sections within the menus.
     *
     * Usage example:
     *
     * ```tsx
     * <CDSDropdown label="Label">
     *   <CDSDropdown.Section label="Section" divider={true}>
     *     <CDSDropdown.Item label="Item" />
     *   </CDSDropdown.Section>
     *   <CDSDropdown.Section label="Section">
     *     <CDSDropdown.Item label="Item" />
     *   </CDSDropdown.Section>
     * </CDSDropdown>
     * ```
     */
    Section: {
        ({ label, divider, children, className, }: import("./components/section").CDSDropdownSectionProps): import("react/jsx-runtime").JSX.Element;
        displayName: string;
    };
};
export { CDSDropdownNamespace as CDSDropdown };
export default CDSDropdownNamespace;
