import type { Dispatch, MutableRefObject, ReactNode, SetStateAction } from 'react';
import type { UseFloatingReturn, useFloatingTree, useInteractions } from '@floating-ui/react';
export declare const CDSDropdownPlacementArray: readonly ["left", "right"];
export type CDSDropdownPlacement = (typeof CDSDropdownPlacementArray)[number];
export declare const CDSDropdownSizeArray: readonly ["sm", "md"];
export type CDSDropdownSize = (typeof CDSDropdownSizeArray)[number];
export type CDSDropdownPanelProps = {
    activeIndex: number | null;
    allowHover: boolean;
    children: ReactNode;
    context: UseFloatingReturn<HTMLButtonElement>['context'];
    getFloatingProps: ReturnType<typeof useInteractions>['getFloatingProps'];
    getItemProps: ReturnType<typeof useInteractions>['getItemProps'];
    isNested: boolean;
    isOpen: boolean;
    listItemsRef: MutableRefObject<(HTMLElement | null)[]>;
    refs: UseFloatingReturn<HTMLButtonElement>['refs'];
    setActiveIndex: Dispatch<SetStateAction<number | null>>;
    strategy: UseFloatingReturn<HTMLButtonElement>['strategy'];
    tree: ReturnType<typeof useFloatingTree>;
    x: number | null;
    y: number | null;
    className?: string;
    root?: HTMLElement | null;
};
export type TCDSDropdownContext = {
    placement: CDSDropdownPlacement;
    size: CDSDropdownSize;
    className?: string;
};
export type CDSDropdownPanelContext = Pick<CDSDropdownPanelProps, 'activeIndex' | 'allowHover' | 'tree' | 'isOpen' | 'setActiveIndex' | 'getItemProps'>;
