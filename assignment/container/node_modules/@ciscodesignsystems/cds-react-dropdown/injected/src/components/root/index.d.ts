/// <reference types="react" />
export declare const CDSDropdownRoot: import("react").ForwardRefExoticComponent<(Omit<{
    children: import("react").ReactNode;
    label?: string | undefined;
    placement?: "right" | "left" | undefined;
    size?: "sm" | "md" | undefined;
    onChange?: ((value: boolean) => void) | undefined;
    root?: HTMLElement | null | undefined;
} & {
    open?: boolean | undefined;
} & {
    defaultOpen?: undefined;
} & Omit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | import("react").RefObject<HTMLButtonElement> | null | undefined;
} & Pick<import("@ciscodesignsystems/cds-react-button").CDSButtonProps<"button">, "disabled" | "variant" | "destructive" | "icon">, "ref"> | Omit<{
    children: import("react").ReactNode;
    label?: string | undefined;
    placement?: "right" | "left" | undefined;
    size?: "sm" | "md" | undefined;
    onChange?: ((value: boolean) => void) | undefined;
    root?: HTMLElement | null | undefined;
} & {
    defaultOpen?: boolean | undefined;
} & {
    open?: undefined;
} & Omit<import("react").DetailedHTMLProps<import("react").ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>, "ref"> & {
    ref?: ((instance: HTMLButtonElement | null) => void) | import("react").RefObject<HTMLButtonElement> | null | undefined;
} & Pick<import("@ciscodesignsystems/cds-react-button").CDSButtonProps<"button">, "disabled" | "variant" | "destructive" | "icon">, "ref">) & import("react").RefAttributes<HTMLButtonElement>>;
export default CDSDropdownRoot;
