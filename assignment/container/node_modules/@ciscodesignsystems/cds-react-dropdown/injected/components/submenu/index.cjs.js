'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var react$1 = require('@floating-ui/react');
var phosphorReact = require('phosphor-react');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var injected = require('@ciscodesignsystems/cds-react-flex/injected');
var context = require('../../util/context.cjs.js');
var useMenu = require('../../util/hooks/use-menu.cjs.js');
var useSize = require('../../util/hooks/use-size.cjs.js');
var index = require('../item/index.cjs.js');
var index$1 = require('../panel/index.cjs.js');
var submenu_module = require('./submenu.module.cjs.js');

const CDSDropdownSubmenu = /*#__PURE__*/react.forwardRef(({
  children,
  label,
  className
}, forwardedRef) => {
  var _a;
  const {
    activeIndex,
    allowHover,
    context: context$1,
    getFloatingProps,
    getItemProps,
    getReferenceProps,
    isNested,
    isOpen,
    listItemsRef,
    nodeId,
    refs,
    setActiveIndex,
    strategy,
    tree,
    x,
    y
  } = useMenu.useMenu({});
  const itemRef = react.useRef(null);
  const referenceRef = react$1.useMergeRefs([refs.setReference, forwardedRef, itemRef]);
  const iconSize = useSize.useSize() === 'sm' ? 14 : 16;
  const {
    className: dropdownClassName
  } = react.useContext(context.CDSDropdownContext);
  return jsxRuntime.jsxs(react$1.FloatingNode, {
    id: nodeId,
    children: [jsxRuntime.jsx(index.CDSDropdownItem, {
      className: className,
      label: jsxRuntime.jsxs(injected.CDSFlex, {
        align: "center",
        grow: true,
        justify: "space-between",
        children: [label, jsxRuntime.jsx(phosphorReact.CaretRight, {
          className: cdsComponentUtilities.cx(submenu_module["default"], 'cds-dropdown__sub-menu__right-caret-icon'),
          size: iconSize
        })]
      }),
      ref: referenceRef,
      ...getReferenceProps()
    }), jsxRuntime.jsx(index$1.CDSDropdownPanel, {
      className: dropdownClassName,
      activeIndex: activeIndex,
      allowHover: allowHover,
      context: context$1,
      getFloatingProps: getFloatingProps,
      getItemProps: getItemProps,
      isNested: isNested,
      isOpen: isOpen,
      listItemsRef: listItemsRef,
      refs: refs,
      setActiveIndex: setActiveIndex,
      strategy: strategy,
      tree: tree,
      root: (_a = itemRef.current) === null || _a === void 0 ? void 0 : _a.parentElement,
      x: x,
      y: y,
      children: children
    })]
  });
});
CDSDropdownSubmenu.displayName = 'CDSDropdown.Submenu';

exports.CDSDropdownSubmenu = CDSDropdownSubmenu;
exports["default"] = CDSDropdownSubmenu;
