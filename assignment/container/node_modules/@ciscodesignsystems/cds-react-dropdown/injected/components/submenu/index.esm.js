import { forwardRef, useRef, useContext } from 'react';
import { useMergeRefs, FloatingNode } from '@floating-ui/react';
import { CaretRight } from 'phosphor-react';
import { cx } from '@ciscodesignsystems/cds-component-utilities';
import { CDSFlex } from '@ciscodesignsystems/cds-react-flex/injected';
import { CDSDropdownContext } from '../../util/context.esm.js';
import { useMenu } from '../../util/hooks/use-menu.esm.js';
import { useSize } from '../../util/hooks/use-size.esm.js';
import { CDSDropdownItem } from '../item/index.esm.js';
import { CDSDropdownPanel } from '../panel/index.esm.js';
import styles from './submenu.module.esm.js';
import { jsxs, jsx } from 'react/jsx-runtime';

const CDSDropdownSubmenu = /*#__PURE__*/forwardRef(({
  children,
  label,
  className
}, forwardedRef) => {
  const {
    activeIndex,
    allowHover,
    context,
    getFloatingProps,
    getItemProps,
    getReferenceProps,
    isNested,
    isOpen,
    listItemsRef,
    nodeId,
    refs,
    setActiveIndex,
    strategy,
    tree,
    x,
    y
  } = useMenu({});
  const itemRef = useRef(null);
  const referenceRef = useMergeRefs([refs.setReference, forwardedRef, itemRef]);
  const iconSize = useSize() === 'sm' ? 14 : 16;
  const {
    className: dropdownClassName
  } = useContext(CDSDropdownContext);
  return /*#__PURE__*/jsxs(FloatingNode, {
    id: nodeId,
    children: [/*#__PURE__*/jsx(CDSDropdownItem, {
      className: className,
      label: /*#__PURE__*/jsxs(CDSFlex, {
        align: "center",
        grow: true,
        justify: "space-between",
        children: [label, /*#__PURE__*/jsx(CaretRight, {
          className: cx(styles, 'cds-dropdown__sub-menu__right-caret-icon'),
          size: iconSize
        })]
      }),
      ref: referenceRef,
      ...getReferenceProps()
    }), /*#__PURE__*/jsx(CDSDropdownPanel, {
      className: dropdownClassName,
      activeIndex: activeIndex,
      allowHover: allowHover,
      context: context,
      getFloatingProps: getFloatingProps,
      getItemProps: getItemProps,
      isNested: isNested,
      isOpen: isOpen,
      listItemsRef: listItemsRef,
      refs: refs,
      setActiveIndex: setActiveIndex,
      strategy: strategy,
      tree: tree,
      root: itemRef.current?.parentElement,
      x: x,
      y: y,
      children: children
    })]
  });
});
CDSDropdownSubmenu.displayName = 'CDSDropdown.Submenu';

export { CDSDropdownSubmenu, CDSDropdownSubmenu as default };
