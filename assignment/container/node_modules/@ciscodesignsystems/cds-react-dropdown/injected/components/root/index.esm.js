import { forwardRef, useRef } from 'react';
import { useMergeRefs, FloatingNode } from '@floating-ui/react';
import { CaretDown } from 'phosphor-react';
import { cx } from '@ciscodesignsystems/cds-component-utilities';
import { CDSButton } from '@ciscodesignsystems/cds-react-button/injected';
import { useMenu } from '../../util/hooks/use-menu.esm.js';
import { useSize } from '../../util/hooks/use-size.esm.js';
import { CDSDropdownPanel } from '../panel/index.esm.js';
import styles from './root.module.esm.js';
import { jsx, jsxs } from 'react/jsx-runtime';

const CDSDropdownRoot = /*#__PURE__*/forwardRef(({
  children,
  label,
  className,
  open,
  onChange,
  defaultOpen,
  root,
  ...props
}, ref) => {
  const {
    activeIndex,
    allowHover,
    context,
    getFloatingProps,
    getItemProps,
    getReferenceProps,
    isNested,
    isOpen,
    listItemsRef,
    nodeId,
    refs,
    setActiveIndex,
    strategy,
    tree,
    x,
    y
  } = useMenu({
    open,
    onChange,
    defaultOpen
  });
  const buttonRef = useRef(null);
  const referenceRef = useMergeRefs([refs.setReference, buttonRef, ref]);
  const rootRef = root ?? buttonRef.current?.parentElement;
  const size = useSize();
  const iconSize = size === 'sm' ? 14 : 16;
  const rightIcon = label ? /*#__PURE__*/jsx(CaretDown, {
    size: iconSize,
    className: isOpen ? cx(styles, 'cds-dropdown__trigger-indicator--open') : ''
  }) : null;
  return /*#__PURE__*/jsxs(FloatingNode, {
    id: nodeId,
    children: [/*#__PURE__*/jsx(CDSButton, {
      ref: referenceRef,
      rightIcon: rightIcon,
      className: cx(styles, 'cds-dropdown-trigger'),
      size: size,
      ...props,
      ...getReferenceProps(),
      children: label
    }), /*#__PURE__*/jsx(CDSDropdownPanel, {
      className: className,
      activeIndex: activeIndex,
      allowHover: allowHover,
      context: context,
      getFloatingProps: getFloatingProps,
      getItemProps: getItemProps,
      isNested: isNested,
      isOpen: isOpen,
      listItemsRef: listItemsRef,
      refs: refs,
      setActiveIndex: setActiveIndex,
      strategy: strategy,
      tree: tree,
      x: x,
      y: y,
      root: rootRef,
      children: children
    })]
  });
});
CDSDropdownRoot.displayName = 'CDSDropdownRoot';

export { CDSDropdownRoot, CDSDropdownRoot as default };
