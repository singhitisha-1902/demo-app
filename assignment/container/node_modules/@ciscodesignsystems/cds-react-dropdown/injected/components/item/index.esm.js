import { forwardRef } from 'react';
import { useListItem } from '@floating-ui/react';
import { useMergeRefs } from '@ciscodesignsystems/cds-component-types';
import { cx } from '@ciscodesignsystems/cds-component-utilities';
import { useDropdownPanelContext } from '../../util/panel-context.esm.js';
import styles from './item.module.esm.js';
import { jsxs } from 'react/jsx-runtime';

const CDSDropdownItem = /*#__PURE__*/forwardRef(({
  destructive = false,
  icon,
  label,
  className,
  onClick: onClickFromProps,
  onMouseEnter: onMouseEnterFromProps,
  ...rest
}, ref) => {
  const {
    ref: listItemRef,
    index
  } = useListItem();
  const mergeRefs = useMergeRefs([ref, listItemRef]);
  const classNames = cx(styles, 'cds-dropdown__item', {
    'cds-dropdown__item--destructive': destructive
  }, className);
  const {
    tree,
    activeIndex,
    setActiveIndex,
    isOpen,
    allowHover,
    getItemProps
  } = useDropdownPanelContext();
  return /*#__PURE__*/jsxs("button", {
    ...rest,
    className: classNames,
    ref: mergeRefs,
    role: "menuitem",
    type: "button",
    tabIndex: activeIndex === index ? 0 : -1,
    ...getItemProps({
      onClick(e) {
        onClickFromProps?.(e);
        if (!rest['aria-haspopup']) {
          tree?.events.emit('click');
        }
      },
      onMouseEnter(e) {
        onMouseEnterFromProps?.(e);
        if (allowHover && isOpen) {
          setActiveIndex(index);
        }
      }
    }),
    children: [icon, label]
  });
});
CDSDropdownItem.displayName = 'CDSDropdown.Item';
CDSDropdownItem.defaultProps = {
  icon: undefined,
  destructive: false
};

export { CDSDropdownItem, CDSDropdownItem as default };
