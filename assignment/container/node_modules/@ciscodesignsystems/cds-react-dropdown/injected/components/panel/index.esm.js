import { useMemo } from 'react';
import { FloatingPortal, FloatingList, FloatingFocusManager } from '@floating-ui/react';
import { LazyMotion, domAnimation, m } from 'framer-motion';
import { cx } from '@ciscodesignsystems/cds-component-utilities';
import { useSize } from '../../util/hooks/use-size.esm.js';
import { DropdownPanelContext } from '../../util/panel-context.esm.js';
import styles from './panel.module.esm.js';
import { jsx } from 'react/jsx-runtime';

const CDSDropdownPanel = ({
  activeIndex,
  allowHover,
  children,
  context,
  getFloatingProps,
  getItemProps,
  isNested,
  isOpen,
  listItemsRef,
  refs,
  setActiveIndex,
  strategy,
  tree,
  x,
  y,
  className = '',
  root = undefined
}) => {
  const size = useSize();
  const classNames = cx(styles, 'cds-dropdown', `cds-dropdown--${size}`, className);
  const dropdownPanelContext = useMemo(() => ({
    activeIndex,
    allowHover,
    tree,
    isOpen,
    setActiveIndex,
    getItemProps
  }), [activeIndex, allowHover, getItemProps, isOpen, setActiveIndex, tree]);
  return /*#__PURE__*/jsx(FloatingPortal, {
    ...(root ? {
      root
    } : {}),
    children: /*#__PURE__*/jsx(FloatingList, {
      elementsRef: listItemsRef,
      children: /*#__PURE__*/jsx(DropdownPanelContext.Provider, {
        value: dropdownPanelContext,
        children: /*#__PURE__*/jsx(LazyMotion, {
          features: domAnimation,
          children: isOpen && /*#__PURE__*/jsx(FloatingFocusManager, {
            context: context
            // Only initially focus the root floating menu.
            ,
            initialFocus: isNested ? -1 : refs.floating
            // Prevent outside content interference.
            ,
            modal: false
            // Only return focus to the root menu's reference when menus close.
            ,
            returnFocus: !isNested,
            children: /*#__PURE__*/jsx(m.div, {
              animate: {
                opacity: 1,
                translateY: 0
              },
              exit: {
                opacity: 0,
                translateY: -16
              },
              initial: {
                opacity: 0,
                translateY: -16
              },
              transition: {
                type: 'keyframes',
                duration: 0.1
              },
              ...getFloatingProps(),
              className: classNames,
              ref: refs.setFloating,
              style: {
                position: strategy,
                top: y ?? 0,
                left: x ?? 0,
                width: 'max-content'
              },
              ...getFloatingProps(),
              children: children
            })
          })
        })
      })
    })
  });
};
CDSDropdownPanel.displayName = 'CDSDropdownPanel';

export { CDSDropdownPanel, CDSDropdownPanel as default };
