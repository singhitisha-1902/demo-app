import { forwardRef, useMemo } from 'react';
import { FloatingTree } from '@floating-ui/react';
import { IconContext } from 'phosphor-react';
import { CDSDropdownItem } from './components/item/index.esm.js';
import { CDSDropdownRoot } from './components/root/index.esm.js';
import { CDSDropdownSection } from './components/section/index.esm.js';
import { CDSDropdownSubmenu } from './components/submenu/index.esm.js';
import { CDSDropdownContext } from './util/context.esm.js';
import { withSubComponent } from './util/with-sub-componet.esm.js';
import { jsx } from 'react/jsx-runtime';

/**
 * This is where you want to insert `CDSDropdown.`-prefixed contextual components in order to create your dropdown menu.
 *
 * Usage example:
 *
 * ```tsx
 * <CDSDropdown label="Label">
 *   <CDSDropdown.Section label="Section title" divider={true}>
 *     <CDSDropdown.Item label="Item 1" />
 *   </CDSDropdown.Section>
 *   <CDSDropdown.Section label="Section title" />
 *     <CDSDropdown.Item label="Item 2" />
 *     <CDSDropdown.Submenu label="Submenu">
 *       <CDSDropdown.Item label="Submenu item" />
 *     </CDSDropdown.Submenu>
 *   </CDSDropdown.Section>
 * </CDSDropdown>
 * ```
 */
const CDSDropdown = /*#__PURE__*/forwardRef(({
  placement = 'left',
  size = 'md',
  className,
  ...rest
}, ref) => {
  const iconContext = useMemo(() => ({
    size: size === 'sm' ? 18 : 20,
    weight: 'bold'
  }), [size]);
  const dropdownContextValue = useMemo(() => ({
    placement,
    size,
    className
  }), [className, placement, size]);
  return /*#__PURE__*/jsx(IconContext.Provider, {
    value: iconContext,
    children: /*#__PURE__*/jsx(CDSDropdownContext.Provider, {
      value: dropdownContextValue,
      children: /*#__PURE__*/jsx(FloatingTree, {
        children: /*#__PURE__*/jsx(CDSDropdownRoot, {
          className: className,
          ref: ref,
          ...rest
        })
      })
    })
  });
});
CDSDropdown.displayName = 'CDSDropdown';
CDSDropdown.defaultProps = {
  label: '',
  open: undefined,
  onChange: undefined,
  defaultOpen: false,
  root: undefined
};
const CDSDropdownNamespace = withSubComponent(CDSDropdown, {
  /**
   * The basic building block of dropdown menus, this creates an item that can be clicked to trigger an action.
   *
   * Usage example:
   *
   * ```tsx
   * <CDSDropdown label="Label">
   *   <CDSDropdown.Item label="Option 1" onClick={handleOnFoo} />
   *   <CDSDropdown.Item label="Option 2" onClick={handleOnBar} />
   * </CDSDropdown>
   * ```
   */
  Item: CDSDropdownItem,
  /**
   * Allows for the creation of cascading or sub-menus.
   *
   * Usage example:
   *
   * ```tsx
   * <CDSDropdown label="Label">
   *   <CDSDropdown.Item label="Option 1" />
   *   <CDSDropdown.Item label="Option 2" />
   *   <CDSDropdown.Submenu label="Submenu">
   *     <CDSDropdown.Item label="Option 3" />
   *     <CDSDropdown.Item label="Option 4" />
   *   </CDSDropdown.Submenu>
   * </CDSDropdown>
   * ```
   */
  Submenu: CDSDropdownSubmenu,
  /**
   * Allows for the creation of sections within the menus.
   *
   * Usage example:
   *
   * ```tsx
   * <CDSDropdown label="Label">
   *   <CDSDropdown.Section label="Section" divider={true}>
   *     <CDSDropdown.Item label="Item" />
   *   </CDSDropdown.Section>
   *   <CDSDropdown.Section label="Section">
   *     <CDSDropdown.Item label="Item" />
   *   </CDSDropdown.Section>
   * </CDSDropdown>
   * ```
   */
  Section: CDSDropdownSection
});
CDSDropdownNamespace.displayName = 'CDSDropdown';

export { CDSDropdownNamespace as CDSDropdown, CDSDropdownNamespace as default };
