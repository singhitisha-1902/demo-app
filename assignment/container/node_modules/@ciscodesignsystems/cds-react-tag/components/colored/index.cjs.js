'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var cdsReactTooltip = require('@ciscodesignsystems/cds-react-tooltip');
var truncatedText = require('../../util/truncated-text/truncated-text.cjs.js');
var defaultTag_module = require('../default-tag/default-tag.module.cjs.js');
var colored_module = require('./colored.module.cjs.js');

const CDSTagColored = /*#__PURE__*/react.forwardRef((props, ref) => {
  const {
    children,
    size,
    color,
    className,
    truncated,
    ...rest
  } = props;
  const defaultTagClassNames = cdsComponentUtilities.cx(defaultTag_module["default"], 'cds-tag', `cds-tag--${size}`, {
    'cds-tag--truncated': truncated
  });
  const classNames = cdsComponentUtilities.cx(colored_module["default"], `cds-tag--colored--${color === null || color === void 0 ? void 0 : color.replace(/[A-Z]/g, m => '-' + m.toLowerCase())}`, defaultTagClassNames, className);
  const truncatedChildren = truncated ? truncatedText.truncateText(children, truncated) : children;
  return truncated ? jsxRuntime.jsx(cdsReactTooltip.CDSTooltip, {
    autoPlacement: true,
    title: children,
    children: jsxRuntime.jsx("div", {
      className: classNames,
      role: "presentation",
      ref: ref,
      ...rest,
      children: truncatedChildren
    })
  }) : jsxRuntime.jsx("div", {
    className: classNames,
    role: "presentation",
    ref: ref,
    ...rest,
    children: truncatedChildren
  });
});
CDSTagColored.displayName = 'CDSTag.Colored';
CDSTagColored.defaultProps = {
  color: 'accentA',
  size: 'md',
  truncated: false
};

exports.CDSTagColored = CDSTagColored;
