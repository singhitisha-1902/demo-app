'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var phosphorReact = require('phosphor-react');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var addTag_module = require('./add-tag.module.cjs.js');

const CDSTagAdd = /*#__PURE__*/react.forwardRef((props, ref) => {
  const {
    children = 'Add',
    onSubmit,
    className,
    size = 'md',
    ...rest
  } = props;
  const [value, setValue] = react.useState('');
  const handleOnSubmit = () => {
    if (value.trim().length === 0) return;
    onSubmit(value);
    setValue('');
  };
  const handleKeyDown = event => {
    if (event.key === 'Enter') {
      event.preventDefault();
      handleOnSubmit();
    }
  };
  const handleOnBlur = () => {
    if (value.trim().length === 0) {
      setValue('');
    }
  };
  const containerClasses = cdsComponentUtilities.cx(addTag_module["default"], 'cds-tag__add-container', {
    [`cds-tag__add-container--${size}`]: size
  }, className);
  return jsxRuntime.jsxs("div", {
    className: containerClasses,
    ref: ref,
    ...rest,
    children: [jsxRuntime.jsx("input", {
      className: cdsComponentUtilities.cx(addTag_module["default"], 'cds-tag__add-input'),
      value: value,
      onChange: event => setValue(event.target.value),
      placeholder: children,
      onKeyDown: handleKeyDown,
      onBlur: handleOnBlur
    }), jsxRuntime.jsx(phosphorReact.Plus, {
      size: 14,
      weight: "bold",
      className: cdsComponentUtilities.cx(addTag_module["default"], 'cds-tag__add-icon')
    }), jsxRuntime.jsx("div", {
      "aria-hidden": true,
      className: cdsComponentUtilities.cx(addTag_module["default"], 'cds-tag__add-hidden-text'),
      children: value || children
    })]
  });
});
CDSTagAdd.displayName = 'CDSTag.Add';

exports.CDSTagAdd = CDSTagAdd;
