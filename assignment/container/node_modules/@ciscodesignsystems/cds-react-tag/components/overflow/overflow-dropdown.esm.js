import { isValidElement, useState, useRef, useMemo } from 'react';
import { useFloating, flip, shift, offset, autoUpdate, useListNavigation, useInteractions, useHover, safePolygon, useFocus, useClick, useRole, useDismiss, FloatingPortal } from '@floating-ui/react';
import { AnimatePresence, motion } from 'framer-motion';
import { cx } from '@ciscodesignsystems/cds-component-utilities';
import { CDSCheckbox } from '@ciscodesignsystems/cds-react-checkbox';
import { CDSPopover } from '@ciscodesignsystems/cds-react-popover';
import { CDSTagSelectable } from '../selectable/index.esm.js';
import styles from './overflow.module.esm.js';
import { jsx, jsxs } from 'react/jsx-runtime';

const BasicOverflow = ({
  hidden,
  size
}) => /*#__PURE__*/jsx("li", {
  children: /*#__PURE__*/jsx(CDSPopover, {
    title: hidden.map(current => /*#__PURE__*/isValidElement(current) && current.props.children).join(', '),
    children: /*#__PURE__*/jsx(CDSTagSelectable, {
      className: cx(styles, 'cds-tag__overflow__count'),
      size: size,
      children: `+${hidden.length}`
    })
  })
});
const SelectableOverflow = ({
  hidden,
  size
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [activeIndex, setActiveIndex] = useState(null);
  const tagListItemRef = useRef([]);
  const hiddenTagList = hidden;
  const {
    context,
    refs,
    strategy,
    x,
    y
  } = useFloating({
    open: isOpen,
    placement: 'bottom-start',
    onOpenChange: setIsOpen,
    middleware: [flip(), shift(), offset({
      mainAxis: 4
    })],
    whileElementsMounted: autoUpdate
  });
  const listNavigation = useListNavigation(context, {
    listRef: tagListItemRef,
    activeIndex,
    onNavigate: setActiveIndex
  });
  const {
    getFloatingProps,
    getReferenceProps,
    getItemProps
  } = useInteractions([useHover(context, {
    handleClose: safePolygon()
  }), useFocus(context, {
    keyboardOnly: true
  }), useClick(context, {
    event: 'mousedown'
  }), useRole(context, {
    role: 'menu'
  }), useDismiss(context), listNavigation]);
  const selected = useMemo(() => {
    return hiddenTagList.some(current => /*#__PURE__*/isValidElement(current) && current.props.selected);
  }, [hiddenTagList]);
  return /*#__PURE__*/jsxs("li", {
    children: [/*#__PURE__*/jsx(CDSTagSelectable, {
      className: cx(styles, 'cds-tag__overflow__count'),
      ref: refs.setReference,
      selected: selected,
      size: size,
      ...getReferenceProps(),
      children: `+${hidden.length}`
    }), isOpen && /*#__PURE__*/jsx(FloatingPortal, {
      children: /*#__PURE__*/jsx(AnimatePresence, {
        children: isOpen && /*#__PURE__*/jsx(motion.div, {
          animate: {
            opacity: 1,
            translateY: 0
          },
          className: cx(styles, 'cds-tag__overflow__dropdown'),
          exit: {
            opacity: 0,
            translateY: -16
          },
          initial: {
            opacity: 0,
            translateY: -16
          },
          ref: refs.setFloating,
          style: {
            position: strategy,
            top: y ?? 0,
            left: x ?? 0,
            width: 'max-content'
          },
          transition: {
            type: 'keyframes',
            duration: 0.1
          },
          role: "menu",
          ...getFloatingProps(),
          children: hiddenTagList.map((current, index) => /*#__PURE__*/isValidElement(current) && /*#__PURE__*/jsxs("button", {
            className: cx(styles, 'cds-tag__overflow__dropdown__item'),
            tabIndex: activeIndex === index ? 0 : -1,
            role: "menuitem",
            type: "button",
            ref: node => {
              tagListItemRef.current[index] = node;
            },
            ...getItemProps(),
            onClick: current.props.onClick,
            children: [/*#__PURE__*/jsx(CDSCheckbox, {
              checked: current.props.selected,
              readOnly: true,
              size: "md"
            }), current.props.children]
          }, current.key))
        })
      })
    })]
  });
};
const CDSTagOverflowDropdown = ({
  hidden,
  selectable,
  size
}) => {
  if (hidden.length > 0) {
    return selectable ? /*#__PURE__*/jsx(SelectableOverflow, {
      hidden: hidden,
      size: size
    }) : /*#__PURE__*/jsx(BasicOverflow, {
      hidden: hidden,
      size: size
    });
  }
  return null;
};

export { CDSTagOverflowDropdown };
