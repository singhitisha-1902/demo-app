import { forwardRef } from 'react';
import { cx } from '@ciscodesignsystems/cds-component-utilities';
import { CDSTooltip } from '@ciscodesignsystems/cds-react-tooltip/injected';
import { truncateText } from '../../util/truncated-text/truncated-text.esm.js';
import defaultTagStyles from '../default-tag/default-tag.module.esm.js';
import styles from './colored.module.esm.js';
import { jsx } from 'react/jsx-runtime';

const CDSTagColored = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    children,
    size,
    color,
    className,
    truncated,
    ...rest
  } = props;
  const defaultTagClassNames = cx(defaultTagStyles, 'cds-tag', `cds-tag--${size}`, {
    'cds-tag--truncated': truncated
  });
  const classNames = cx(styles, `cds-tag--colored--${color?.replace(/[A-Z]/g, m => '-' + m.toLowerCase())}`, defaultTagClassNames, className);
  const truncatedChildren = truncated ? truncateText(children, truncated) : children;
  return truncated ? /*#__PURE__*/jsx(CDSTooltip, {
    autoPlacement: true,
    title: children,
    children: /*#__PURE__*/jsx("div", {
      className: classNames,
      role: "presentation",
      ref: ref,
      ...rest,
      children: truncatedChildren
    })
  }) : /*#__PURE__*/jsx("div", {
    className: classNames,
    role: "presentation",
    ref: ref,
    ...rest,
    children: truncatedChildren
  });
});
CDSTagColored.displayName = 'CDSTag.Colored';
CDSTagColored.defaultProps = {
  color: 'accentA',
  size: 'md',
  truncated: false
};

export { CDSTagColored };
