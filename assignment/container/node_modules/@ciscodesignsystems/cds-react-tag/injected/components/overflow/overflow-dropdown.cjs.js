'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var react$1 = require('@floating-ui/react');
var framerMotion = require('framer-motion');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var injected$1 = require('@ciscodesignsystems/cds-react-checkbox/injected');
var injected = require('@ciscodesignsystems/cds-react-popover/injected');
var index = require('../selectable/index.cjs.js');
var overflow_module = require('./overflow.module.cjs.js');

const BasicOverflow = ({
  hidden,
  size
}) => jsxRuntime.jsx("li", {
  children: jsxRuntime.jsx(injected.CDSPopover, {
    title: hidden.map(current => /*#__PURE__*/react.isValidElement(current) && current.props.children).join(', '),
    children: jsxRuntime.jsx(index.CDSTagSelectable, {
      className: cdsComponentUtilities.cx(overflow_module["default"], 'cds-tag__overflow__count'),
      size: size,
      children: `+${hidden.length}`
    })
  })
});
const SelectableOverflow = ({
  hidden,
  size
}) => {
  const [isOpen, setIsOpen] = react.useState(false);
  const [activeIndex, setActiveIndex] = react.useState(null);
  const tagListItemRef = react.useRef([]);
  const hiddenTagList = hidden;
  const {
    context,
    refs,
    strategy,
    x,
    y
  } = react$1.useFloating({
    open: isOpen,
    placement: 'bottom-start',
    onOpenChange: setIsOpen,
    middleware: [react$1.flip(), react$1.shift(), react$1.offset({
      mainAxis: 4
    })],
    whileElementsMounted: react$1.autoUpdate
  });
  const listNavigation = react$1.useListNavigation(context, {
    listRef: tagListItemRef,
    activeIndex,
    onNavigate: setActiveIndex
  });
  const {
    getFloatingProps,
    getReferenceProps,
    getItemProps
  } = react$1.useInteractions([react$1.useHover(context, {
    handleClose: react$1.safePolygon()
  }), react$1.useFocus(context, {
    keyboardOnly: true
  }), react$1.useClick(context, {
    event: 'mousedown'
  }), react$1.useRole(context, {
    role: 'menu'
  }), react$1.useDismiss(context), listNavigation]);
  const selected = react.useMemo(() => {
    return hiddenTagList.some(current => /*#__PURE__*/react.isValidElement(current) && current.props.selected);
  }, [hiddenTagList]);
  return jsxRuntime.jsxs("li", {
    children: [jsxRuntime.jsx(index.CDSTagSelectable, {
      className: cdsComponentUtilities.cx(overflow_module["default"], 'cds-tag__overflow__count'),
      ref: refs.setReference,
      selected: selected,
      size: size,
      ...getReferenceProps(),
      children: `+${hidden.length}`
    }), isOpen && jsxRuntime.jsx(react$1.FloatingPortal, {
      children: jsxRuntime.jsx(framerMotion.AnimatePresence, {
        children: isOpen && jsxRuntime.jsx(framerMotion.motion.div, {
          animate: {
            opacity: 1,
            translateY: 0
          },
          className: cdsComponentUtilities.cx(overflow_module["default"], 'cds-tag__overflow__dropdown'),
          exit: {
            opacity: 0,
            translateY: -16
          },
          initial: {
            opacity: 0,
            translateY: -16
          },
          ref: refs.setFloating,
          style: {
            position: strategy,
            top: y !== null && y !== void 0 ? y : 0,
            left: x !== null && x !== void 0 ? x : 0,
            width: 'max-content'
          },
          transition: {
            type: 'keyframes',
            duration: 0.1
          },
          role: "menu",
          ...getFloatingProps(),
          children: hiddenTagList.map((current, index) => /*#__PURE__*/react.isValidElement(current) && jsxRuntime.jsxs("button", {
            className: cdsComponentUtilities.cx(overflow_module["default"], 'cds-tag__overflow__dropdown__item'),
            tabIndex: activeIndex === index ? 0 : -1,
            role: "menuitem",
            type: "button",
            ref: node => {
              tagListItemRef.current[index] = node;
            },
            ...getItemProps(),
            onClick: current.props.onClick,
            children: [jsxRuntime.jsx(injected$1.CDSCheckbox, {
              checked: current.props.selected,
              readOnly: true,
              size: "md"
            }), current.props.children]
          }, current.key))
        })
      })
    })]
  });
};
const CDSTagOverflowDropdown = ({
  hidden,
  selectable,
  size
}) => {
  if (hidden.length > 0) {
    return selectable ? jsxRuntime.jsx(SelectableOverflow, {
      hidden: hidden,
      size: size
    }) : jsxRuntime.jsx(BasicOverflow, {
      hidden: hidden,
      size: size
    });
  }
  return null;
};

exports.CDSTagOverflowDropdown = CDSTagOverflowDropdown;
