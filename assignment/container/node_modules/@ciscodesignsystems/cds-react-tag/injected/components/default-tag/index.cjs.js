'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var phosphorReact = require('phosphor-react');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var injected = require('@ciscodesignsystems/cds-react-icons/injected');
var injected$1 = require('@ciscodesignsystems/cds-react-tooltip/injected');
var index = require('../../types/index.cjs.js');
var truncatedText = require('../../util/truncated-text/truncated-text.cjs.js');
var defaultTag_module = require('./default-tag.module.cjs.js');

const CDSTag = /*#__PURE__*/react.forwardRef((props, ref) => {
  const {
    children,
    className,
    dashed,
    status,
    onClose,
    size = 'md',
    icon,
    textAlign,
    wrap,
    truncated,
    ...rest
  } = props;
  const classNames = cdsComponentUtilities.cx(defaultTag_module["default"], 'cds-tag', `cds-tag--${size}`, {
    'cds-tag--closable': typeof onClose === 'function',
    'cds-tag--dashed': dashed,
    'cds-tag--truncated': truncated,
    'cds-tag--no-wrap': !wrap,
    [`cds-tag--${status}`]: status
  }, className);
  const tagContent = jsxRuntime.jsx("div", {
    className: wrap && truncated ? cdsComponentUtilities.cx(defaultTag_module["default"], 'cds-tag__children--wrap cds-tag--truncated') : cdsComponentUtilities.cx(defaultTag_module["default"], 'cds-tag__children--no-wrap'),
    style: {
      textAlign: textAlign
    },
    children: truncated ? truncatedText.truncateText(children, truncated) : children
  });
  const tagComponentContent = jsxRuntime.jsxs("div", {
    className: classNames,
    role: "presentation",
    ref: ref,
    ...rest,
    children: [status ? jsxRuntime.jsx(injected.CDSStatusIcon, {
      status: status,
      height: index.CDSTagSizeMap[size],
      width: index.CDSTagSizeMap[size]
    }) : icon, tagContent, typeof onClose === 'function' && jsxRuntime.jsx("button", {
      className: cdsComponentUtilities.cx(defaultTag_module["default"], 'cds-tag--clickable', 'cds-tag__close-icon'),
      onClick: onClose,
      type: "button",
      children: jsxRuntime.jsx(phosphorReact.X, {
        size: 16,
        weight: "bold"
      })
    })]
  });
  const tagComponent = truncated ? jsxRuntime.jsx(injected$1.CDSTooltip, {
    autoPlacement: true,
    title: children ? children.toString() : '',
    children: tagComponentContent
  }) : tagComponentContent;
  return tagComponent;
});
CDSTag.displayName = 'CDSTag';
CDSTag.defaultProps = {
  dashed: false,
  icon: undefined,
  onClose: undefined,
  textAlign: 'center',
  status: undefined,
  wrap: true,
  truncated: false
};

exports.CDSTag = CDSTag;
