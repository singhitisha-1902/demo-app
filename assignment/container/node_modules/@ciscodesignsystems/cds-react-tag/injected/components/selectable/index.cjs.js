'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var injected = require('@ciscodesignsystems/cds-react-tooltip/injected');
var truncatedText = require('../../util/truncated-text/truncated-text.cjs.js');
var defaultTag_module = require('../default-tag/default-tag.module.cjs.js');
var selectable_module = require('./selectable.module.cjs.js');

const CDSTagSelectable = /*#__PURE__*/react.forwardRef((props, ref) => {
  const {
    children,
    className,
    icon,
    selected,
    size,
    wrap,
    truncated,
    ...rest
  } = props;
  const defaultTagClassNames = cdsComponentUtilities.cx(defaultTag_module["default"], 'cds-tag', `cds-tag--${size}`, {
    'cds-tag--truncated': truncated
  }, {
    'cds-tag--no-wrap': !wrap
  });
  const classNames = cdsComponentUtilities.cx(selectable_module["default"], 'cds-tag--selectable', {
    'cds-tag--selectable--selected': selected
  }, className, defaultTagClassNames);
  const truncatedChildren = truncated ? truncatedText.truncateText(children, truncated) : children;
  const childClassnames = cdsComponentUtilities.cx(selectable_module["default"], {
    'cds-tag__children--wrap': wrap,
    'cds-tag__children--no-wrap': !wrap
  });
  const tagContent = truncated ? jsxRuntime.jsx(injected.CDSTooltip, {
    autoPlacement: true,
    title: children,
    children: jsxRuntime.jsxs("button", {
      className: classNames,
      ...rest,
      ref: ref,
      type: "button",
      children: [icon, jsxRuntime.jsx("div", {
        className: childClassnames,
        children: truncatedChildren
      })]
    })
  }) : jsxRuntime.jsxs("button", {
    className: classNames,
    ...rest,
    ref: ref,
    type: "button",
    children: [icon, jsxRuntime.jsx("div", {
      className: childClassnames,
      children: truncatedChildren
    })]
  });
  return tagContent;
});
CDSTagSelectable.defaultProps = {
  selected: false,
  size: 'md',
  wrap: true
};
CDSTagSelectable.displayName = 'CDSTag.Selectable';

exports.CDSTagSelectable = CDSTagSelectable;
