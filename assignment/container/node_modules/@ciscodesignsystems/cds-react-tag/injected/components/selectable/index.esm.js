import { forwardRef } from 'react';
import { cx } from '@ciscodesignsystems/cds-component-utilities';
import { CDSTooltip } from '@ciscodesignsystems/cds-react-tooltip/injected';
import { truncateText } from '../../util/truncated-text/truncated-text.esm.js';
import defaultTagStyles from '../default-tag/default-tag.module.esm.js';
import styles from './selectable.module.esm.js';
import { jsx, jsxs } from 'react/jsx-runtime';

const CDSTagSelectable = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    children,
    className,
    icon,
    selected,
    size,
    wrap,
    truncated,
    ...rest
  } = props;
  const defaultTagClassNames = cx(defaultTagStyles, 'cds-tag', `cds-tag--${size}`, {
    'cds-tag--truncated': truncated
  }, {
    'cds-tag--no-wrap': !wrap
  });
  const classNames = cx(styles, 'cds-tag--selectable', {
    'cds-tag--selectable--selected': selected
  }, className, defaultTagClassNames);
  const truncatedChildren = truncated ? truncateText(children, truncated) : children;
  const childClassnames = cx(styles, {
    'cds-tag__children--wrap': wrap,
    'cds-tag__children--no-wrap': !wrap
  });
  const tagContent = truncated ? /*#__PURE__*/jsx(CDSTooltip, {
    autoPlacement: true,
    title: children,
    children: /*#__PURE__*/jsxs("button", {
      className: classNames,
      ...rest,
      ref: ref,
      type: "button",
      children: [icon, /*#__PURE__*/jsx("div", {
        className: childClassnames,
        children: truncatedChildren
      })]
    })
  }) : /*#__PURE__*/jsxs("button", {
    className: classNames,
    ...rest,
    ref: ref,
    type: "button",
    children: [icon, /*#__PURE__*/jsx("div", {
      className: childClassnames,
      children: truncatedChildren
    })]
  });
  return tagContent;
});
CDSTagSelectable.defaultProps = {
  selected: false,
  size: 'md',
  wrap: true
};
CDSTagSelectable.displayName = 'CDSTag.Selectable';

export { CDSTagSelectable };
