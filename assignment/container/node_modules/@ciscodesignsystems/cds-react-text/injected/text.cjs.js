'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var index = require('./types/index.cjs.js');
var text_module = require('./text.module.cjs.js');

const CDSText = /*#__PURE__*/react.forwardRef((props, ref) => {
  const {
    as,
    align = 'left',
    className,
    size = 'p3',
    weight = 'regular',
    monospace,
    compact,
    ellipsis,
    width,
    style,
    color = 'regular',
    ...rest
  } = props;
  const Component = as || 'p';
  const applyPresetColor = ['light', 'regular'].includes(color);
  const classNames = cdsComponentUtilities.cx(text_module["default"], 'cds-text', `cds-text--${index.CDSTextSizeMap[size]}`, `cds-text__weight--${weight}`, {
    'cds-text--monospace': monospace,
    'cds-text--compact': compact,
    'cds-text--ellipsis': ellipsis,
    [`cds-text__color--${color}`]: applyPresetColor
  }, className);
  const computedStyles = {
    ...style,
    ...(align && {
      textAlign: align
    }),
    ...(color && !applyPresetColor && {
      color
    }),
    ...(width && {
      width
    })
  };
  return jsxRuntime.jsx(Component, {
    className: classNames,
    ref: ref,
    style: computedStyles,
    ...rest
  });
});
CDSText.displayName = 'CDSText';
CDSText.defaultProps = {
  compact: false,
  ellipsis: false,
  monospace: false,
  width: undefined
};

exports.CDSText = CDSText;
exports["default"] = CDSText;
