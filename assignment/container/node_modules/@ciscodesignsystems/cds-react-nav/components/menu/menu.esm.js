import { forwardRef, useRef, useEffect } from 'react';
import { X } from 'phosphor-react';
import { cx } from '@ciscodesignsystems/cds-component-utilities';
import { CDSBreadcrumb } from '@ciscodesignsystems/cds-react-breadcrumb';
import { CDSButton } from '@ciscodesignsystems/cds-react-button';
import { useNavContext } from '../../context/nav-context.esm.js';
import { useNavMenuContext } from '../../context/nav-menu-context.esm.js';
import { CDSNavReducerActionKind } from '../../types/index.esm.js';
import { CDSMenuLabel } from '../menu-label/menu-label.esm.js';
import { CDSMenuLink } from '../menu-link/menu-link.esm.js';
import { CDSNavMenuSection } from '../menu-section/menu-section.esm.js';
import styles from './menu.module.esm.js';
import { jsxs, jsx } from 'react/jsx-runtime';

const CDSNavMenu = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    children,
    title,
    className,
    closeButtonProps,
    backButtonProps,
    ...rest
  } = props;
  const {
    reducerDispatch,
    reducerState
  } = useNavContext();
  const {
    itemName
  } = useNavMenuContext();
  const isSubMenu = reducerState.subMenuStack.length > 1;
  const {
    onClick: closeButtonOnClick,
    className: closeButtonClassName,
    ...closeButtonRest
  } = closeButtonProps || {};
  const {
    onClick: backButtonOnClick,
    className: backButtonClassName,
    children: backButtonChildren = 'Back',
    ...backButtonRest
  } = backButtonProps || {};
  const classes = cx(styles, 'cds-nav__menu', {
    'cds-nav__menu--is-submenu': isSubMenu
  }, className);
  const headerRef = useRef(null);
  useEffect(() => {
    if (isSubMenu && headerRef.current) {
      headerRef.current.focus();
    }
  }, [isSubMenu]);
  return /*#__PURE__*/jsxs("div", {
    className: classes,
    ref: ref,
    ...rest,
    children: [/*#__PURE__*/jsxs("div", {
      className: cx(styles, 'cds-nav__menu__header'),
      children: [/*#__PURE__*/jsx("div", {
        className: cx(styles, 'cds-nav__menu__header__item-name'),
        ref: headerRef,
        tabIndex: -1,
        children: title ?? itemName
      }), isSubMenu ? /*#__PURE__*/jsx(CDSBreadcrumb, {
        children: /*#__PURE__*/jsx(CDSBreadcrumb.Link, {
          className: cx(styles, 'cds-nav__menu__header__back-button', backButtonClassName),
          as: "button",
          onClick: e => {
            reducerDispatch?.({
              type: CDSNavReducerActionKind.BACK_SUBMENU,
              payload: {}
            });
            backButtonOnClick?.(e);
          },
          ...backButtonRest,
          children: backButtonChildren
        })
      }) : null, /*#__PURE__*/jsx(CDSButton, {
        variant: "tertiary",
        size: "sm",
        className: cx(styles, 'cds-nav__menu__header__close-button', closeButtonClassName),
        type: "button",
        "aria-label": "Close",
        onClick: e => {
          reducerDispatch?.({
            type: CDSNavReducerActionKind.CLOSE,
            payload: {}
          });
          closeButtonOnClick?.(e);
        },
        icon: /*#__PURE__*/jsx(X, {
          size: 16,
          role: "presentation",
          "aria-hidden": true
        }),
        ...closeButtonRest
      })]
    }), /*#__PURE__*/jsx("div", {
      className: cx(styles, 'cds-nav__menu__content'),
      children: children
    })]
  });
});
CDSNavMenu.defaultProps = {
  title: undefined,
  closeButtonProps: undefined,
  backButtonProps: undefined
};
CDSNavMenu.displayName = 'CDSNav.Menu';
const CDSNavMenuNamespace = Object.assign(CDSNavMenu, {
  Label: CDSMenuLabel,
  Link: CDSMenuLink,
  Section: CDSNavMenuSection
});
CDSNavMenuNamespace.displayName = 'CDSNav.Menu';

export { CDSNavMenuNamespace as CDSNavMenu, CDSNavMenuNamespace as default };
