'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var phosphorReact = require('phosphor-react');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var cdsReactBreadcrumb = require('@ciscodesignsystems/cds-react-breadcrumb');
var cdsReactButton = require('@ciscodesignsystems/cds-react-button');
var navContext = require('../../context/nav-context.cjs.js');
var navMenuContext = require('../../context/nav-menu-context.cjs.js');
var index = require('../../types/index.cjs.js');
var menuLabel = require('../menu-label/menu-label.cjs.js');
var menuLink = require('../menu-link/menu-link.cjs.js');
var menuSection = require('../menu-section/menu-section.cjs.js');
var menu_module = require('./menu.module.cjs.js');

const CDSNavMenu = /*#__PURE__*/react.forwardRef((props, ref) => {
  const {
    children,
    title,
    className,
    closeButtonProps,
    backButtonProps,
    ...rest
  } = props;
  const {
    reducerDispatch,
    reducerState
  } = navContext.useNavContext();
  const {
    itemName
  } = navMenuContext.useNavMenuContext();
  const isSubMenu = reducerState.subMenuStack.length > 1;
  const {
    onClick: closeButtonOnClick,
    className: closeButtonClassName,
    ...closeButtonRest
  } = closeButtonProps || {};
  const {
    onClick: backButtonOnClick,
    className: backButtonClassName,
    children: backButtonChildren = 'Back',
    ...backButtonRest
  } = backButtonProps || {};
  const classes = cdsComponentUtilities.cx(menu_module["default"], 'cds-nav__menu', {
    'cds-nav__menu--is-submenu': isSubMenu
  }, className);
  const headerRef = react.useRef(null);
  react.useEffect(() => {
    if (isSubMenu && headerRef.current) {
      headerRef.current.focus();
    }
  }, [isSubMenu]);
  return jsxRuntime.jsxs("div", {
    className: classes,
    ref: ref,
    ...rest,
    children: [jsxRuntime.jsxs("div", {
      className: cdsComponentUtilities.cx(menu_module["default"], 'cds-nav__menu__header'),
      children: [jsxRuntime.jsx("div", {
        className: cdsComponentUtilities.cx(menu_module["default"], 'cds-nav__menu__header__item-name'),
        ref: headerRef,
        tabIndex: -1,
        children: title !== null && title !== void 0 ? title : itemName
      }), isSubMenu ? jsxRuntime.jsx(cdsReactBreadcrumb.CDSBreadcrumb, {
        children: jsxRuntime.jsx(cdsReactBreadcrumb.CDSBreadcrumb.Link, {
          className: cdsComponentUtilities.cx(menu_module["default"], 'cds-nav__menu__header__back-button', backButtonClassName),
          as: "button",
          onClick: e => {
            reducerDispatch === null || reducerDispatch === void 0 ? void 0 : reducerDispatch({
              type: index.CDSNavReducerActionKind.BACK_SUBMENU,
              payload: {}
            });
            backButtonOnClick === null || backButtonOnClick === void 0 ? void 0 : backButtonOnClick(e);
          },
          ...backButtonRest,
          children: backButtonChildren
        })
      }) : null, jsxRuntime.jsx(cdsReactButton.CDSButton, {
        variant: "tertiary",
        size: "sm",
        className: cdsComponentUtilities.cx(menu_module["default"], 'cds-nav__menu__header__close-button', closeButtonClassName),
        type: "button",
        "aria-label": "Close",
        onClick: e => {
          reducerDispatch === null || reducerDispatch === void 0 ? void 0 : reducerDispatch({
            type: index.CDSNavReducerActionKind.CLOSE,
            payload: {}
          });
          closeButtonOnClick === null || closeButtonOnClick === void 0 ? void 0 : closeButtonOnClick(e);
        },
        icon: jsxRuntime.jsx(phosphorReact.X, {
          size: 16,
          role: "presentation",
          "aria-hidden": true
        }),
        ...closeButtonRest
      })]
    }), jsxRuntime.jsx("div", {
      className: cdsComponentUtilities.cx(menu_module["default"], 'cds-nav__menu__content'),
      children: children
    })]
  });
});
CDSNavMenu.defaultProps = {
  title: undefined,
  closeButtonProps: undefined,
  backButtonProps: undefined
};
CDSNavMenu.displayName = 'CDSNav.Menu';
const CDSNavMenuNamespace = Object.assign(CDSNavMenu, {
  Label: menuLabel.CDSMenuLabel,
  Link: menuLink.CDSMenuLink,
  Section: menuSection.CDSNavMenuSection
});
CDSNavMenuNamespace.displayName = 'CDSNav.Menu';

exports.CDSNavMenu = CDSNavMenuNamespace;
exports["default"] = CDSNavMenuNamespace;
