'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var framerMotion = require('framer-motion');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var cdsReactIcons = require('@ciscodesignsystems/cds-react-icons');
var cdsReactTooltip = require('@ciscodesignsystems/cds-react-tooltip');
var index$1 = require('../../animation/index.cjs.js');
var navContext = require('../../context/nav-context.cjs.js');
var index = require('../../types/index.cjs.js');
var icon = require('../icon/icon.cjs.js');
var navItemBase_module = require('./nav-item-base.module.cjs.js');

const CDSNavItemBase = /*#__PURE__*/react.forwardRef((props, ref) => {
  const {
    menu,
    icon: icon$1,
    as,
    children,
    title,
    className,
    isSelected,
    isBordered,
    subHeading,
    onClick,
    onMouseEnter,
    onMouseLeave,
    id,
    canShowTooltip,
    canShowCaret,
    suffix,
    ...rest
  } = props;
  const {
    isCollapsed,
    iconOnlyCollapsed,
    reducerDispatch
  } = navContext.useNavContext();
  const Component = as || 'a';
  const classes = cdsComponentUtilities.cx(navItemBase_module["default"], 'cds-nav__item', {
    'cds-nav__item--selected': isSelected,
    'cds-nav__item--bordered': isBordered,
    'cds-nav__item--collapsed': isCollapsed,
    'cds-nav__item--collapsed-icon-only': iconOnlyCollapsed
  }, className);
  const navItemTextRef = react.useRef(null);
  const isTextOverflowing = cdsComponentUtilities.useIsElementOverflowing(navItemTextRef);
  const [showTooltip, setShowTooltip] = react.useState(false);
  return jsxRuntime.jsxs("li", {
    role: "none",
    className: cdsComponentUtilities.cx(navItemBase_module["default"], 'cds-nav__list-item-container'),
    id: id,
    children: [jsxRuntime.jsx(cdsReactTooltip.CDSTooltip, {
      title: children,
      placement: "right",
      open: showTooltip && canShowTooltip,
      children: jsxRuntime.jsx("div", {
        children: jsxRuntime.jsx(Component, {
          className: cdsComponentUtilities.cx(navItemBase_module["default"], 'cds-nav__item__custom-component'),
          ref: ref,
          onMouseEnter: e => {
            setShowTooltip(!!isCollapsed && !!iconOnlyCollapsed || isTextOverflowing);
            onMouseEnter === null || onMouseEnter === void 0 ? void 0 : onMouseEnter(e);
          },
          onMouseLeave: e => {
            setShowTooltip(false);
            onMouseLeave === null || onMouseLeave === void 0 ? void 0 : onMouseLeave(e);
          },
          onClick: e => {
            if (!menu) {
              reducerDispatch === null || reducerDispatch === void 0 ? void 0 : reducerDispatch({
                type: index.CDSNavReducerActionKind.CLOSE,
                payload: {}
              });
            }
            onClick === null || onClick === void 0 ? void 0 : onClick(e);
          },
          ...rest,
          children: jsxRuntime.jsxs(framerMotion.motion.div, {
            layout: true,
            layoutScroll: true,
            className: classes,
            transition: index$1.CDSNavLayoutAnimation,
            children: [icon$1 ? jsxRuntime.jsx(framerMotion.motion.div, {
              layout: "position",
              transition: index$1.CDSNavLayoutAnimation,
              className: cdsComponentUtilities.cx(navItemBase_module["default"], 'cds-nav__item__icon'),
              role: "presentation",
              "aria-hidden": true,
              children: jsxRuntime.jsx(icon.CDSNavIcon, {
                icon: icon$1
              })
            }) : null, subHeading && !isCollapsed ? jsxRuntime.jsx(framerMotion.motion.div, {
              layout: "position",
              className: cdsComponentUtilities.cx(navItemBase_module["default"], 'cds-nav__item__text__subheading'),
              children: subHeading
            }) : null, !iconOnlyCollapsed ? jsxRuntime.jsxs(framerMotion.motion.span, {
              layout: "position",
              transition: index$1.CDSNavLayoutAnimation,
              className: cdsComponentUtilities.cx(navItemBase_module["default"], 'cds-nav__item__text-container'),
              children: [jsxRuntime.jsx(framerMotion.motion.span, {
                ref: navItemTextRef,
                className: cdsComponentUtilities.cx(navItemBase_module["default"], 'cds-nav__item__text'),
                children: children
              }), suffix && !isCollapsed ? jsxRuntime.jsx(framerMotion.motion.span, {
                className: cdsComponentUtilities.cx(navItemBase_module["default"], 'cds-nav__item__suffix'),
                children: suffix
              }) : null]
            }) : null, canShowCaret && !isCollapsed ? jsxRuntime.jsx(framerMotion.motion.div, {
              layout: "position",
              transition: index$1.CDSNavLayoutAnimation,
              className: cdsComponentUtilities.cx(navItemBase_module["default"], 'cds-nav__item__caret'),
              role: "presentation",
              "aria-hidden": true,
              children: jsxRuntime.jsx(cdsReactIcons.IcDropdownCaret, {
                size: 16
              })
            }) : null]
          })
        })
      })
    }), menu]
  });
});
CDSNavItemBase.displayName = 'CDSNav.Item.Base';
CDSNavItemBase.defaultProps = {
  isSelected: false,
  isBordered: false,
  canShowTooltip: true,
  canShowCaret: false
};

exports.CDSNavItemBase = CDSNavItemBase;
exports["default"] = CDSNavItemBase;
