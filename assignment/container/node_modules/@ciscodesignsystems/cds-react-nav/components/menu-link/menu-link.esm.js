import { forwardRef, useRef } from 'react';
import { Check } from 'phosphor-react';
import { cx, useIsElementOverflowing } from '@ciscodesignsystems/cds-component-utilities';
import { IcDropdownCaret } from '@ciscodesignsystems/cds-react-icons';
import { CDSTooltip } from '@ciscodesignsystems/cds-react-tooltip';
import { useNavContext } from '../../context/nav-context.esm.js';
import { CDSNavReducerActionKind } from '../../types/index.esm.js';
import styles from './menu-link.module.esm.js';
import { jsx, jsxs } from 'react/jsx-runtime';

const withSubMenu = {
  defaultComponent: 'button',
  'aria-haspopup': true
};
const navLink = {
  defaultComponent: 'a'
};
const CDSMenuLink = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    children,
    className,
    as,
    menu,
    isSelected,
    icon,
    suffix,
    onClick,
    ...rest
  } = props;
  const {
    reducerDispatch,
    menuSize
  } = useNavContext();
  const classes = cx(styles, 'cds-nav__menu__link', {
    'cds-nav__menu__link--selected': isSelected,
    'cds-nav__menu__link--comfy': menuSize === 'comfy'
  }, className);
  const menuLinkTextRef = useRef(null);
  const isTextOverflowing = useIsElementOverflowing(menuLinkTextRef);
  const {
    defaultComponent,
    ...componentProps
  } = menu ? withSubMenu : navLink;
  const Component = as || defaultComponent;
  const RightIcon = menu ? IcDropdownCaret : Check;
  return /*#__PURE__*/jsx(CDSTooltip, {
    title: children,
    open: isTextOverflowing ? undefined : false,
    placement: "right",
    children: /*#__PURE__*/jsxs(Component, {
      ...componentProps,
      ...rest,
      className: classes,
      ref: ref,
      onClick: event => {
        onClick?.(event);
        reducerDispatch?.({
          type: CDSNavReducerActionKind.OPEN_SUBMENU,
          payload: {
            menu
          }
        });
      },
      children: [icon, /*#__PURE__*/jsx("div", {
        ref: menuLinkTextRef,
        className: cx(styles, 'cds-nav__menu__link__text'),
        children: children
      }), /*#__PURE__*/jsx("div", {
        className: cx(styles, 'cds-nav__menu__link__suffix'),
        children: suffix
      }), menu || isSelected ? /*#__PURE__*/jsx(RightIcon, {
        className: cx(styles, 'cds-nav__menu__link__right-icon'),
        size: 16,
        weight: "bold"
      }) : null]
    })
  });
});
CDSMenuLink.displayName = 'CDSNav.Menu.Link';

export { CDSMenuLink, CDSMenuLink as default };
