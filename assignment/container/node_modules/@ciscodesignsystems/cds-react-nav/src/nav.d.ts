import { type ComponentPropsWithRef, type ReactNode } from 'react';
import type { CDSNavMenuGroupGap, CDSNavMenuSize } from './types';
export interface CDSNavProps extends Omit<ComponentPropsWithRef<'div'>, 'children'> {
    isCollapsed?: boolean;
    initialCollapsed?: boolean;
    setCollapsed?: (value: boolean) => void;
    iconOnlyCollapsed?: boolean;
    children: ReactNode;
    hideCollapseButton?: boolean;
    collapseButtonProps?: Omit<ComponentPropsWithRef<'button'>, 'onAnimationStart' | 'onDragStart' | 'onDragEnd' | 'onDrag' | 'children' | 'onClick' | 'aria-controls'> & {
        children?: ReactNode;
        tooltip?: string;
    };
    menuSize?: CDSNavMenuSize;
    menuGroupGap?: CDSNavMenuGroupGap;
}
declare const CDSNav: import("react").ForwardRefExoticComponent<Omit<CDSNavProps, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
declare const CDSNavNamespace: import("react").ForwardRefExoticComponent<Omit<CDSNavProps, "ref"> & import("react").RefAttributes<HTMLDivElement>> & {
    Switcher: import("./components/switcher/switcher").CDSNavSwitcherComponent;
    Section: {
        ({ children }: import("./components/section/section").CDSNavSectionProps): (string | number | import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | Iterable<ReactNode>)[];
        displayName: string;
    };
    Item: import("./types").CDSNavItemComponent;
    Menu: import("react").ForwardRefExoticComponent<import("./components/menu/menu").CDSNavMenuProps & import("react").RefAttributes<HTMLDivElement>> & {
        Label: {
            ({ children }: Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref">): import("react/jsx-runtime").JSX.Element;
            displayName: string;
        };
        Link: import("react").FC & (<C extends import("react").ElementType = "a">(props: import("./components").CDSMenuLinkProps<C>) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | null);
        Section: import("react").ForwardRefExoticComponent<Omit<Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
            ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
        }, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
    };
};
export default CDSNav;
export { CDSNavNamespace as CDSNav };
