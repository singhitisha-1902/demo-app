import { type ComponentPropsWithRef, type ComponentPropsWithoutRef } from 'react';
import { type CDSButtonProps } from '@ciscodesignsystems/cds-react-button';
export interface CDSNavMenuProps extends ComponentPropsWithoutRef<'div'> {
    title?: string;
    closeButtonProps?: CDSButtonProps;
    backButtonProps?: Omit<ComponentPropsWithRef<'button'>, 'children'> & {
        children?: string;
    };
}
declare const CDSNavMenuNamespace: import("react").ForwardRefExoticComponent<CDSNavMenuProps & import("react").RefAttributes<HTMLDivElement>> & {
    Label: {
        ({ children }: Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref">): import("react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    Link: import("react").FC & (<C extends import("react").ElementType = "a">(props: import("../menu-link/menu-link").CDSMenuLinkProps<C>) => import("react").ReactElement<any, string | import("react").JSXElementConstructor<any>> | null);
    Section: import("react").ForwardRefExoticComponent<Omit<Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref"> & {
        ref?: ((instance: HTMLDivElement | null) => void) | import("react").RefObject<HTMLDivElement> | null | undefined;
    }, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
};
export { CDSNavMenuNamespace as CDSNavMenu };
export default CDSNavMenuNamespace;
