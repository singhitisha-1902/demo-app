'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var phosphorReact = require('phosphor-react');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var injected$1 = require('@ciscodesignsystems/cds-react-icons/injected');
var injected = require('@ciscodesignsystems/cds-react-tooltip/injected');
var navContext = require('../../context/nav-context.cjs.js');
var index = require('../../types/index.cjs.js');
var menuLink_module = require('./menu-link.module.cjs.js');

const withSubMenu = {
  defaultComponent: 'button',
  'aria-haspopup': true
};
const navLink = {
  defaultComponent: 'a'
};
const CDSMenuLink = /*#__PURE__*/react.forwardRef((props, ref) => {
  const {
    children,
    className,
    as,
    menu,
    isSelected,
    icon,
    suffix,
    onClick,
    ...rest
  } = props;
  const {
    reducerDispatch,
    menuSize
  } = navContext.useNavContext();
  const classes = cdsComponentUtilities.cx(menuLink_module["default"], 'cds-nav__menu__link', {
    'cds-nav__menu__link--selected': isSelected,
    'cds-nav__menu__link--comfy': menuSize === 'comfy'
  }, className);
  const menuLinkTextRef = react.useRef(null);
  const isTextOverflowing = cdsComponentUtilities.useIsElementOverflowing(menuLinkTextRef);
  const {
    defaultComponent,
    ...componentProps
  } = menu ? withSubMenu : navLink;
  const Component = as || defaultComponent;
  const RightIcon = menu ? injected$1.IcDropdownCaret : phosphorReact.Check;
  return jsxRuntime.jsx(injected.CDSTooltip, {
    title: children,
    open: isTextOverflowing ? undefined : false,
    placement: "right",
    children: jsxRuntime.jsxs(Component, {
      ...componentProps,
      ...rest,
      className: classes,
      ref: ref,
      onClick: event => {
        onClick === null || onClick === void 0 ? void 0 : onClick(event);
        reducerDispatch === null || reducerDispatch === void 0 ? void 0 : reducerDispatch({
          type: index.CDSNavReducerActionKind.OPEN_SUBMENU,
          payload: {
            menu
          }
        });
      },
      children: [icon, jsxRuntime.jsx("div", {
        ref: menuLinkTextRef,
        className: cdsComponentUtilities.cx(menuLink_module["default"], 'cds-nav__menu__link__text'),
        children: children
      }), jsxRuntime.jsx("div", {
        className: cdsComponentUtilities.cx(menuLink_module["default"], 'cds-nav__menu__link__suffix'),
        children: suffix
      }), menu || isSelected ? jsxRuntime.jsx(RightIcon, {
        className: cdsComponentUtilities.cx(menuLink_module["default"], 'cds-nav__menu__link__right-icon'),
        size: 16,
        weight: "bold"
      }) : null]
    })
  });
});
CDSMenuLink.displayName = 'CDSNav.Menu.Link';

exports.CDSMenuLink = CDSMenuLink;
exports["default"] = CDSMenuLink;
