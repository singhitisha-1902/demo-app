import { forwardRef, useRef, useState } from 'react';
import { motion } from 'framer-motion';
import { cx, useIsElementOverflowing } from '@ciscodesignsystems/cds-component-utilities';
import { IcDropdownCaret } from '@ciscodesignsystems/cds-react-icons/injected';
import { CDSTooltip } from '@ciscodesignsystems/cds-react-tooltip/injected';
import { CDSNavLayoutAnimation } from '../../animation/index.esm.js';
import { useNavContext } from '../../context/nav-context.esm.js';
import { CDSNavReducerActionKind } from '../../types/index.esm.js';
import { CDSNavIcon } from '../icon/icon.esm.js';
import styles from './nav-item-base.module.esm.js';
import { jsxs, jsx } from 'react/jsx-runtime';

const CDSNavItemBase = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    menu,
    icon,
    as,
    children,
    title,
    className,
    isSelected,
    isBordered,
    subHeading,
    onClick,
    onMouseEnter,
    onMouseLeave,
    id,
    canShowTooltip,
    canShowCaret,
    suffix,
    ...rest
  } = props;
  const {
    isCollapsed,
    iconOnlyCollapsed,
    reducerDispatch
  } = useNavContext();
  const Component = as || 'a';
  const classes = cx(styles, 'cds-nav__item', {
    'cds-nav__item--selected': isSelected,
    'cds-nav__item--bordered': isBordered,
    'cds-nav__item--collapsed': isCollapsed,
    'cds-nav__item--collapsed-icon-only': iconOnlyCollapsed
  }, className);
  const navItemTextRef = useRef(null);
  const isTextOverflowing = useIsElementOverflowing(navItemTextRef);
  const [showTooltip, setShowTooltip] = useState(false);
  return /*#__PURE__*/jsxs("li", {
    role: "none",
    className: cx(styles, 'cds-nav__list-item-container'),
    id: id,
    children: [/*#__PURE__*/jsx(CDSTooltip, {
      title: children,
      placement: "right",
      open: showTooltip && canShowTooltip,
      children: /*#__PURE__*/jsx("div", {
        children: /*#__PURE__*/jsx(Component, {
          className: cx(styles, 'cds-nav__item__custom-component'),
          ref: ref,
          onMouseEnter: e => {
            setShowTooltip(!!isCollapsed && !!iconOnlyCollapsed || isTextOverflowing);
            onMouseEnter?.(e);
          },
          onMouseLeave: e => {
            setShowTooltip(false);
            onMouseLeave?.(e);
          },
          onClick: e => {
            if (!menu) {
              reducerDispatch?.({
                type: CDSNavReducerActionKind.CLOSE,
                payload: {}
              });
            }
            onClick?.(e);
          },
          ...rest,
          children: /*#__PURE__*/jsxs(motion.div, {
            layout: true,
            layoutScroll: true,
            className: classes,
            transition: CDSNavLayoutAnimation,
            children: [icon ? /*#__PURE__*/jsx(motion.div, {
              layout: "position",
              transition: CDSNavLayoutAnimation,
              className: cx(styles, 'cds-nav__item__icon'),
              role: "presentation",
              "aria-hidden": true,
              children: /*#__PURE__*/jsx(CDSNavIcon, {
                icon: icon
              })
            }) : null, subHeading && !isCollapsed ? /*#__PURE__*/jsx(motion.div, {
              layout: "position",
              className: cx(styles, 'cds-nav__item__text__subheading'),
              children: subHeading
            }) : null, !iconOnlyCollapsed ? /*#__PURE__*/jsxs(motion.span, {
              layout: "position",
              transition: CDSNavLayoutAnimation,
              className: cx(styles, 'cds-nav__item__text-container'),
              children: [/*#__PURE__*/jsx(motion.span, {
                ref: navItemTextRef,
                className: cx(styles, 'cds-nav__item__text'),
                children: children
              }), suffix && !isCollapsed ? /*#__PURE__*/jsx(motion.span, {
                className: cx(styles, 'cds-nav__item__suffix'),
                children: suffix
              }) : null]
            }) : null, canShowCaret && !isCollapsed ? /*#__PURE__*/jsx(motion.div, {
              layout: "position",
              transition: CDSNavLayoutAnimation,
              className: cx(styles, 'cds-nav__item__caret'),
              role: "presentation",
              "aria-hidden": true,
              children: /*#__PURE__*/jsx(IcDropdownCaret, {
                size: 16
              })
            }) : null]
          })
        })
      })
    }), menu]
  });
});
CDSNavItemBase.displayName = 'CDSNav.Item.Base';
CDSNavItemBase.defaultProps = {
  isSelected: false,
  isBordered: false,
  canShowTooltip: true,
  canShowCaret: false
};

export { CDSNavItemBase, CDSNavItemBase as default };
