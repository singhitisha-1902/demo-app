import { useReducer } from 'react';
import { CDSNavReducerActionKind } from '../types/index.esm.js';

const stateWithAnimating = (prevState, newState) => {
  const animating = prevState.isAnimating || prevState.isOpen !== newState.isOpen;
  return {
    ...newState,
    isAnimating: animating
  };
};
const reducer = (state, action) => {
  const {
    payload,
    type
  } = action;
  const closedState = stateWithAnimating(state, {
    ...state,
    isOpen: false,
    event: undefined
  });
  switch (type) {
    case CDSNavReducerActionKind.ANIMATION_END:
      return {
        ...state,
        isAnimating: false
      };
    case CDSNavReducerActionKind.HOVER:
      if (state.isOpen && state.event === 'click') {
        return state;
      } else if (!payload.menu) {
        return closedState;
      }
      return stateWithAnimating(state, {
        isOpen: true,
        id: payload.id,
        event: 'hover',
        subMenuStack: state.isOpen && state.id === payload.id ? state.subMenuStack : [payload.menu]
      });
    case CDSNavReducerActionKind.UNHOVER:
      if (state.event === 'click' || state.id !== payload.id) {
        return state;
      }
      return closedState;
    case CDSNavReducerActionKind.CLICK:
      if (state.event === 'click' && state.id === payload.id || !payload.menu) {
        return closedState;
      }
      return stateWithAnimating(state, {
        isOpen: true,
        id: payload.id,
        event: 'click',
        subMenuStack: [payload.menu]
      });
    case CDSNavReducerActionKind.CLOSE:
      return closedState;
    case CDSNavReducerActionKind.OPEN_SUBMENU:
      if (!payload.menu) {
        return closedState;
      }
      return {
        ...state,
        subMenuStack: [...state.subMenuStack, payload.menu]
      };
    case CDSNavReducerActionKind.BACK_SUBMENU:
      return {
        ...state,
        subMenuStack: [...state.subMenuStack.slice(0, -1)]
      };
    default:
      return state;
  }
};
const useNavReducer = () => {
  return useReducer(reducer, {
    isOpen: false,
    event: undefined,
    subMenuStack: [],
    isAnimating: false
  });
};

export { useNavReducer };
