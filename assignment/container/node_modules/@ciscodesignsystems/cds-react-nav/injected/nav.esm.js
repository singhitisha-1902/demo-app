import { forwardRef, useRef, useEffect, useMemo } from 'react';
import { useMotionValue, useTransform, animate, MotionConfig, LayoutGroup, motion, AnimatePresence } from 'framer-motion';
import { List } from 'phosphor-react';
import { useMergeRefs } from '@ciscodesignsystems/cds-component-types';
import { useControllableState, cx } from '@ciscodesignsystems/cds-component-utilities';
import { CDSTooltip } from '@ciscodesignsystems/cds-react-tooltip/injected';
import { CDSNavAnimation } from './animation/index.esm.js';
import { CDSNavMenu as CDSNavMenuNamespace } from './components/menu/menu.esm.js';
import { CDSNavItem } from './components/nav-item/nav-item.esm.js';
import { CDSNavSection } from './components/section/section.esm.js';
import { CDSNavSwitcher } from './components/switcher/switcher.esm.js';
import { NavContext } from './context/nav-context.esm.js';
import { useNavReducer } from './hooks/use-nav-reducer.esm.js';
import { CDSNavReducerActionKind } from './types/index.esm.js';
import styles from './nav.module.esm.js';
import { jsx, jsxs } from 'react/jsx-runtime';

const CDSNav = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    children,
    className,
    isCollapsed: isCollapsedFromProps,
    initialCollapsed,
    setCollapsed: setCollapsedFromProps,
    iconOnlyCollapsed,
    id,
    title,
    hideCollapseButton,
    collapseButtonProps,
    menuSize,
    menuGroupGap,
    ...rest
  } = props;
  const [isCollapsed, setCollapsed] = useControllableState({
    value: isCollapsedFromProps,
    defaultValue: initialCollapsed,
    onChange: setCollapsedFromProps
  });
  const [reducerState, reducerDispatch] = useNavReducer();
  const classes = cx(styles, 'cds-nav__container', className);
  const {
    children: collapseButtonChildren,
    tooltip: collapseButtonTooltip,
    className: collapseButtonClassName,
    ...collapseButtonRest
  } = collapseButtonProps || {};
  const floatingMenuPositionRef = useRef(null);
  const flyoutMenuXMotionValue = useMotionValue(0);
  const floatingMenuAnimationX = useTransform(flyoutMenuXMotionValue, [0, 100], ['-105%', '0%'], {
    clamp: true
  });
  useEffect(() => {
    animate(flyoutMenuXMotionValue, reducerState.isOpen ? 100 : 0, {
      ...CDSNavAnimation,
      onComplete: () => {
        reducerDispatch({
          type: CDSNavReducerActionKind.ANIMATION_END,
          payload: {}
        });
      }
    });
  }, [flyoutMenuXMotionValue, reducerDispatch, reducerState.isOpen]);
  const navItemRefs = useRef({});
  const mergeRef = useMergeRefs([ref, floatingMenuPositionRef]);
  const getNavItemCollapsedAnimationState = () => {
    if (isCollapsed) {
      if (iconOnlyCollapsed) {
        return 'iconOnlyCollapsed';
      }
      return 'collapsed';
    }
    return 'expanded';
  };
  const navContextValue = useMemo(() => ({
    reducerState,
    reducerDispatch,
    isCollapsed,
    iconOnlyCollapsed: isCollapsed && iconOnlyCollapsed,
    floatingMenuPositionRef,
    floatingMenuAnimationX,
    navItemRefs,
    menuSize,
    menuGroupGap
  }), [floatingMenuAnimationX, iconOnlyCollapsed, isCollapsed, menuGroupGap, menuSize, reducerDispatch, reducerState]);
  const canShowCollapseButtonTooltip = !!collapseButtonTooltip && (isCollapsed || !collapseButtonChildren);
  return /*#__PURE__*/jsx(NavContext.Provider, {
    value: navContextValue,
    children: /*#__PURE__*/jsx(MotionConfig, {
      transition: CDSNavAnimation,
      children: /*#__PURE__*/jsx(LayoutGroup, {
        children: /*#__PURE__*/jsxs("nav", {
          className: classes,
          ref: mergeRef,
          id: id,
          ...rest,
          children: [/*#__PURE__*/jsx("h2", {
            className: cx(styles, 'cds-nav--screen-reader-only'),
            children: title
          }), /*#__PURE__*/jsx(motion.div, {
            className: cx(styles, 'cds-nav__collapse-button-container'),
            children: !hideCollapseButton ? /*#__PURE__*/jsx(CDSTooltip, {
              open: canShowCollapseButtonTooltip ? undefined : false,
              title: collapseButtonProps?.tooltip ?? 'Collapse',
              placement: "right",
              updateOnAnimationFrame: true,
              children: /*#__PURE__*/jsx(motion.div, {
                children: /*#__PURE__*/jsxs(motion.button, {
                  ref: element => navItemRefs.current['collapseButton'] = element,
                  className: cx(styles, 'cds-nav__collapse-button', collapseButtonClassName),
                  variants: {
                    default: {
                      paddingLeft: '16px',
                      paddingRight: '16px'
                    },
                    collapsed: {
                      paddingLeft: `${(104 - 24) / 2}px`,
                      paddingRight: `${(104 - 24) / 2}px`
                    },
                    iconOnlyCollapsed: {
                      paddingLeft: `${(56 - 24) / 2}px`,
                      paddingRight: `${(56 - 24) / 2}px`
                    }
                  },
                  animate: getNavItemCollapsedAnimationState(),
                  "aria-label": "Collapse Site Navigation",
                  ...collapseButtonRest,
                  "aria-controls": id,
                  onClick: () => setCollapsed(prev => !prev),
                  children: [/*#__PURE__*/jsx(List, {
                    size: 24,
                    role: "presentation",
                    "aria-hidden": true
                  }), collapseButtonChildren && !isCollapsed ? /*#__PURE__*/jsx(AnimatePresence, {
                    initial: false,
                    exitBeforeEnter: true,
                    children: /*#__PURE__*/jsx(motion.div, {
                      initial: {
                        opacity: 0
                      },
                      animate: {
                        opacity: 1
                      },
                      exit: {
                        opacity: 0
                      },
                      children: collapseButtonChildren
                    })
                  }) : null]
                })
              })
            }) : null
          }), /*#__PURE__*/jsx("ul", {
            "aria-orientation": "vertical",
            role: "menubar",
            className: cx(styles, 'cds-nav'),
            children: children
          })]
        })
      })
    })
  });
});
CDSNav.displayName = 'CDSNav';
CDSNav.defaultProps = {
  isCollapsed: undefined,
  setCollapsed: undefined,
  initialCollapsed: false,
  iconOnlyCollapsed: false,
  id: 'cds-site-nav-wrapper',
  title: 'Site Navigation',
  hideCollapseButton: false,
  collapseButtonProps: undefined,
  menuSize: 'compact',
  menuGroupGap: 32
};
const CDSNavNamespace = Object.assign(CDSNav, {
  Switcher: CDSNavSwitcher,
  Section: CDSNavSection,
  Item: CDSNavItem,
  Menu: CDSNavMenuNamespace
});
CDSNavNamespace.displayName = 'CDSNav';

export { CDSNavNamespace as CDSNav, CDSNav as default };
