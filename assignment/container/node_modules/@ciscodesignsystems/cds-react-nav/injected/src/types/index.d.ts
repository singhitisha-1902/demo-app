import type { Dispatch, ElementType, FC, ReactElement, ReactNode, RefObject } from 'react';
import type { MotionValue } from 'framer-motion';
import type { Either, PolymorphicComponentPropWithRef } from '@ciscodesignsystems/cds-component-types';
import type { CDSNavIconProps } from '../components';
export declare const CDSNavMenuSizeArray: readonly ["comfy", "compact"];
export type CDSNavMenuSize = (typeof CDSNavMenuSizeArray)[number];
export declare const CDSNavMenuGroupGapArray: readonly [24, 32];
export type CDSNavMenuGroupGap = (typeof CDSNavMenuGroupGapArray)[number];
export interface CDSNavMenuContext {
    itemName: string;
}
export interface CDSNavContext {
    reducerState: CDSNavReducerState;
    reducerDispatch?: Dispatch<CDSNavReducerAction>;
    isCollapsed?: boolean;
    iconOnlyCollapsed?: boolean;
    floatingMenuPositionRef: RefObject<HTMLDivElement> | null;
    floatingMenuAnimationX: MotionValue<string> | null;
    navItemRefs: RefObject<Record<string, HTMLElement>> | null;
    menuSize?: CDSNavMenuSize;
    /**
     * Spacing between sections in the flyout menu
     **/
    menuGroupGap?: CDSNavMenuGroupGap;
}
export type CDSNavReducerPayload = {
    id?: string;
    menu?: ReactElement;
};
export type CDSNavReducerState = Pick<CDSNavReducerPayload, 'id'> & {
    isOpen: boolean;
    event?: 'hover' | 'click';
    isAnimating?: boolean;
    subMenuStack: ReactElement[];
};
export declare enum CDSNavReducerActionKind {
    HOVER = "HOVER",
    UNHOVER = "UNHOVER",
    CLICK = "CLICK",
    CLOSE = "CLOSE",
    ANIMATION_END = "ANIMATION_END",
    OPEN_SUBMENU = "OPEN_SUBMENU",
    BACK_SUBMENU = "BACK_SUBMENU"
}
export type CDSNavReducerAction = {
    type: CDSNavReducerActionKind;
    payload: CDSNavReducerPayload;
};
export type CDSNavItemProps<C extends ElementType = 'a'> = PolymorphicComponentPropWithRef<C, {
    icon: CDSNavIconProps['icon'] | ReactElement;
    menu?: ReactElement;
    canShowTooltip?: boolean;
    children: string;
    suffix?: ReactNode;
} & Either<{
    isSelected?: boolean;
}, {
    isBordered?: boolean;
    subHeading?: string;
}>>;
export type CDSNavItemComponent = FC & (<C extends ElementType = 'a'>(props: CDSNavItemProps<C>) => ReactElement | null);
