'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var framerMotion = require('framer-motion');
var phosphorReact = require('phosphor-react');
var cdsComponentTypes = require('@ciscodesignsystems/cds-component-types');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var cdsReactTooltip = require('@ciscodesignsystems/cds-react-tooltip');
var index = require('./animation/index.cjs.js');
var menu = require('./components/menu/menu.cjs.js');
var navItem = require('./components/nav-item/nav-item.cjs.js');
var section = require('./components/section/section.cjs.js');
var switcher = require('./components/switcher/switcher.cjs.js');
var navContext = require('./context/nav-context.cjs.js');
var useNavReducer = require('./hooks/use-nav-reducer.cjs.js');
var index$1 = require('./types/index.cjs.js');
var nav_module = require('./nav.module.cjs.js');

const CDSNav = /*#__PURE__*/react.forwardRef((props, ref) => {
  var _a;
  const {
    children,
    className,
    isCollapsed: isCollapsedFromProps,
    initialCollapsed,
    setCollapsed: setCollapsedFromProps,
    iconOnlyCollapsed,
    id,
    title,
    hideCollapseButton,
    collapseButtonProps,
    menuSize,
    menuGroupGap,
    ...rest
  } = props;
  const [isCollapsed, setCollapsed] = cdsComponentUtilities.useControllableState({
    value: isCollapsedFromProps,
    defaultValue: initialCollapsed,
    onChange: setCollapsedFromProps
  });
  const [reducerState, reducerDispatch] = useNavReducer.useNavReducer();
  const classes = cdsComponentUtilities.cx(nav_module["default"], 'cds-nav__container', className);
  const {
    children: collapseButtonChildren,
    tooltip: collapseButtonTooltip,
    className: collapseButtonClassName,
    ...collapseButtonRest
  } = collapseButtonProps || {};
  const floatingMenuPositionRef = react.useRef(null);
  const flyoutMenuXMotionValue = framerMotion.useMotionValue(0);
  const floatingMenuAnimationX = framerMotion.useTransform(flyoutMenuXMotionValue, [0, 100], ['-105%', '0%'], {
    clamp: true
  });
  react.useEffect(() => {
    framerMotion.animate(flyoutMenuXMotionValue, reducerState.isOpen ? 100 : 0, {
      ...index.CDSNavAnimation,
      onComplete: () => {
        reducerDispatch({
          type: index$1.CDSNavReducerActionKind.ANIMATION_END,
          payload: {}
        });
      }
    });
  }, [flyoutMenuXMotionValue, reducerDispatch, reducerState.isOpen]);
  const navItemRefs = react.useRef({});
  const mergeRef = cdsComponentTypes.useMergeRefs([ref, floatingMenuPositionRef]);
  const getNavItemCollapsedAnimationState = () => {
    if (isCollapsed) {
      if (iconOnlyCollapsed) {
        return 'iconOnlyCollapsed';
      }
      return 'collapsed';
    }
    return 'expanded';
  };
  const navContextValue = react.useMemo(() => ({
    reducerState,
    reducerDispatch,
    isCollapsed,
    iconOnlyCollapsed: isCollapsed && iconOnlyCollapsed,
    floatingMenuPositionRef,
    floatingMenuAnimationX,
    navItemRefs,
    menuSize,
    menuGroupGap
  }), [floatingMenuAnimationX, iconOnlyCollapsed, isCollapsed, menuGroupGap, menuSize, reducerDispatch, reducerState]);
  const canShowCollapseButtonTooltip = !!collapseButtonTooltip && (isCollapsed || !collapseButtonChildren);
  return jsxRuntime.jsx(navContext.NavContext.Provider, {
    value: navContextValue,
    children: jsxRuntime.jsx(framerMotion.MotionConfig, {
      transition: index.CDSNavAnimation,
      children: jsxRuntime.jsx(framerMotion.LayoutGroup, {
        children: jsxRuntime.jsxs("nav", {
          className: classes,
          ref: mergeRef,
          id: id,
          ...rest,
          children: [jsxRuntime.jsx("h2", {
            className: cdsComponentUtilities.cx(nav_module["default"], 'cds-nav--screen-reader-only'),
            children: title
          }), jsxRuntime.jsx(framerMotion.motion.div, {
            className: cdsComponentUtilities.cx(nav_module["default"], 'cds-nav__collapse-button-container'),
            children: !hideCollapseButton ? jsxRuntime.jsx(cdsReactTooltip.CDSTooltip, {
              open: canShowCollapseButtonTooltip ? undefined : false,
              title: (_a = collapseButtonProps === null || collapseButtonProps === void 0 ? void 0 : collapseButtonProps.tooltip) !== null && _a !== void 0 ? _a : 'Collapse',
              placement: "right",
              updateOnAnimationFrame: true,
              children: jsxRuntime.jsx(framerMotion.motion.div, {
                children: jsxRuntime.jsxs(framerMotion.motion.button, {
                  ref: element => navItemRefs.current['collapseButton'] = element,
                  className: cdsComponentUtilities.cx(nav_module["default"], 'cds-nav__collapse-button', collapseButtonClassName),
                  variants: {
                    default: {
                      paddingLeft: '16px',
                      paddingRight: '16px'
                    },
                    collapsed: {
                      paddingLeft: `${(104 - 24) / 2}px`,
                      paddingRight: `${(104 - 24) / 2}px`
                    },
                    iconOnlyCollapsed: {
                      paddingLeft: `${(56 - 24) / 2}px`,
                      paddingRight: `${(56 - 24) / 2}px`
                    }
                  },
                  animate: getNavItemCollapsedAnimationState(),
                  "aria-label": "Collapse Site Navigation",
                  ...collapseButtonRest,
                  "aria-controls": id,
                  onClick: () => setCollapsed(prev => !prev),
                  children: [jsxRuntime.jsx(phosphorReact.List, {
                    size: 24,
                    role: "presentation",
                    "aria-hidden": true
                  }), collapseButtonChildren && !isCollapsed ? jsxRuntime.jsx(framerMotion.AnimatePresence, {
                    initial: false,
                    exitBeforeEnter: true,
                    children: jsxRuntime.jsx(framerMotion.motion.div, {
                      initial: {
                        opacity: 0
                      },
                      animate: {
                        opacity: 1
                      },
                      exit: {
                        opacity: 0
                      },
                      children: collapseButtonChildren
                    })
                  }) : null]
                })
              })
            }) : null
          }), jsxRuntime.jsx("ul", {
            "aria-orientation": "vertical",
            role: "menubar",
            className: cdsComponentUtilities.cx(nav_module["default"], 'cds-nav'),
            children: children
          })]
        })
      })
    })
  });
});
CDSNav.displayName = 'CDSNav';
CDSNav.defaultProps = {
  isCollapsed: undefined,
  setCollapsed: undefined,
  initialCollapsed: false,
  iconOnlyCollapsed: false,
  id: 'cds-site-nav-wrapper',
  title: 'Site Navigation',
  hideCollapseButton: false,
  collapseButtonProps: undefined,
  menuSize: 'compact',
  menuGroupGap: 32
};
const CDSNavNamespace = Object.assign(CDSNav, {
  Switcher: switcher.CDSNavSwitcher,
  Section: section.CDSNavSection,
  Item: navItem.CDSNavItem,
  Menu: menu.CDSNavMenu
});
CDSNavNamespace.displayName = 'CDSNav';

exports.CDSNav = CDSNavNamespace;
exports["default"] = CDSNav;
