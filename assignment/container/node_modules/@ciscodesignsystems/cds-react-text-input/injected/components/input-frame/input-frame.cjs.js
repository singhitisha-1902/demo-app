'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var injected = require('@ciscodesignsystems/cds-react-flex/injected');
var injected$1 = require('@ciscodesignsystems/cds-react-label/injected');
var inputFrame_module = require('./input-frame.module.cjs.js');

const CDSInputFrame = ({
  id,
  children,
  prefix,
  suffix,
  size,
  sentiment,
  bordered,
  disabled,
  label,
  optional,
  tooltip,
  className,
  fixedWidth,
  type,
  readOnly,
  required,
  ...rest
}) => {
  const classNames = cdsComponentUtilities.cx(inputFrame_module["default"], 'cds-text-input-wrapper', `cds-text-input--${sentiment}`, `cds-text-input--${size}`, {
    'cds-text-input--disabled': disabled,
    'cds-text-input--borderless': !bordered,
    'cds-text-input--fluid': !fixedWidth
  }, className);
  const labelClasses = cdsComponentUtilities.cx(inputFrame_module["default"], 'cds-label', `cds-label--${size}`, {
    'cds-label--disabled': disabled
  });
  const wrapperClasses = cdsComponentUtilities.cx(inputFrame_module["default"], {
    'cds-text-input--wrap': fixedWidth
  });
  return jsxRuntime.jsxs(injected.CDSFlex, {
    direction: "vertical",
    className: wrapperClasses,
    grow: true,
    children: [label && jsxRuntime.jsx(injected$1.CDSLabel, {
      htmlFor: id,
      className: labelClasses,
      required: required,
      optional: optional,
      infoMessage: tooltip,
      children: label
    }), jsxRuntime.jsxs("div", {
      className: classNames,
      "data-testid": "test-cds-text-input-component",
      ...rest,
      children: [prefix ? jsxRuntime.jsx("span", {
        className: cdsComponentUtilities.cx(inputFrame_module["default"], 'cds-text-input__prefix'),
        children: prefix
      }) : '', children, suffix]
    })]
  });
};

exports.CDSInputFrame = CDSInputFrame;
