import { forwardRef, useState, useRef } from 'react';
import { useMergeRefs } from '@ciscodesignsystems/cds-component-types';
import { cx } from '@ciscodesignsystems/cds-component-utilities';
import { CDSInputFrame } from './components/input-frame/input-frame.esm.js';
import SuffixComp from './components/suffix/index.esm.js';
import textInputStyles from './text-input.module.esm.js';
import { jsx } from 'react/jsx-runtime';

const CDSTextInput = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    size,
    sentiment,
    bordered,
    disabled,
    invalid,
    prefix,
    suffix,
    className,
    style,
    label,
    optional,
    tooltip,
    fixedWidth,
    value: valueFromProps,
    onChange: onChangeFromProps,
    clearable,
    defaultValue,
    onClear,
    type = 'text',
    onClick,
    onBlur,
    showPasswordText,
    hidePasswordText,
    ...rest
  } = props;
  const [value, setValue] = useState(defaultValue ?? valueFromProps ?? '');
  const [showPassword, setShowPassword] = useState(false);
  const inputType = showPassword ? 'text' : 'password';
  const computedType = type !== 'password' ? type : inputType;
  const inputRef = useRef(null);
  const mergedRef = useMergeRefs([inputRef, ref]);
  const handleClick = event => {
    if (inputRef.current) {
      inputRef.current.focus();
    }
    if (onClick) {
      onClick(event);
    }
  };
  const handleBlur = event => {
    if (event?.relatedTarget?.classList?.contains('cds-text-input__toggle-password')) {
      return;
    }
    if (inputRef.current) {
      inputRef.current.blur();
    }
    if (onBlur) {
      onBlur(event);
    }
  };
  const handleClear = () => {
    setValue('');
    onClear?.();
  };
  const handleChange = event => {
    setValue(event.target.value);
    onChangeFromProps?.(event);
  };
  return /*#__PURE__*/jsx(CDSInputFrame, {
    prefix: prefix,
    suffix: /*#__PURE__*/jsx(SuffixComp, {
      type: type,
      setShowPassword: setShowPassword,
      showPassword: showPassword,
      suffix: suffix,
      hasValue: !!value,
      onClear: clearable ? handleClear : undefined,
      disabled: disabled,
      showPasswordText: showPasswordText,
      hidePasswordText: hidePasswordText
    }),
    size: size,
    bordered: bordered,
    sentiment: invalid && 'negative' || sentiment,
    className: className,
    style: style,
    disabled: disabled,
    label: label,
    optional: optional,
    tooltip: tooltip,
    required: rest.required,
    fixedWidth: fixedWidth,
    id: rest.id,
    onClick: handleClick,
    onBlur: handleBlur,
    children: /*#__PURE__*/jsx("input", {
      className: cx(textInputStyles, 'cds-text-input'),
      ref: mergedRef,
      disabled: disabled,
      onChange: handleChange,
      value: valueFromProps ?? value,
      type: computedType,
      ...rest
    })
  });
});
CDSTextInput.displayName = 'CDSTextInput';
CDSTextInput.defaultProps = {
  size: 'md',
  sentiment: 'control',
  bordered: true,
  invalid: false,
  prefix: undefined,
  suffix: undefined,
  tooltip: undefined,
  optional: undefined,
  label: undefined,
  fixedWidth: false,
  clearable: false,
  className: '',
  onClear: undefined,
  onClick: undefined,
  onBlur: undefined,
  onChange: undefined
};

export { CDSTextInput, CDSTextInput as default };
