'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var phosphorReact = require('phosphor-react');
var cdsComponentTypes = require('@ciscodesignsystems/cds-component-types');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var arrowButton = require('../arrow-button/arrow-button.cjs.js');
var inputFrame = require('../input-frame/input-frame.cjs.js');
var index = require('../suffix/index.cjs.js');
var eventHandlers = require('./event-handlers.cjs.js');
var textInput_module = require('../../text-input.module.cjs.js');
var numberInput_module = require('./number-input.module.cjs.js');

const CDSNumberInput = /*#__PURE__*/react.forwardRef((props, ref) => {
  var _a;
  const {
    size,
    sentiment,
    bordered,
    disabled,
    invalid,
    prefix,
    suffix,
    className,
    style,
    label,
    optional,
    tooltip,
    fixedWidth,
    value: valueFromProps,
    step = 1,
    min,
    max,
    onClear,
    onChange: onChangeFromProps,
    defaultValue,
    readOnly,
    onClick,
    onBlur,
    type = 'number',
    ...rest
  } = props;
  const [value, setValue] = react.useState((_a = defaultValue !== null && defaultValue !== void 0 ? defaultValue : valueFromProps) !== null && _a !== void 0 ? _a : '');
  const classNames = cdsComponentUtilities.cx(numberInput_module["default"], {
    'cds-number-input': type === 'number',
    'cds-number-input__arrow-icons-visible': !disabled && !readOnly && type === 'number'
  }, className);
  const numberInputRef = react.useRef(null);
  const mergedInputRef = cdsComponentTypes.useMergeRefs([numberInputRef, ref]);
  const intervalRef = react.useRef();
  const upArrowClasses = cdsComponentUtilities.cx(numberInput_module["default"], 'cds-number-input__arrow-icons--color', {
    'cds-number-input__arrow-icons--disabled': eventHandlers.isUpArraowDisabled(max, Number(value))
  });
  const downArrowClasses = cdsComponentUtilities.cx(numberInput_module["default"], 'cds-number-input__arrow-icons--color', {
    'cds-number-input__arrow-icons--disabled': eventHandlers.isDownArraowDisabled(min, Number(value))
  });
  const handleArrowDown = (e, type) => {
    var _a;
    e.preventDefault();
    const increase = () => eventHandlers.handleIncrease(max, min, step, Number(value));
    const decrease = () => eventHandlers.handleDecrease(max, min, step, Number(value));
    const fn = type === 'up' ? increase : decrease;
    const newValue = fn();
    setValue(newValue);
    intervalRef.current = setInterval(fn, 500);
    if (numberInputRef.current !== null) {
      const native = (_a = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value')) === null || _a === void 0 ? void 0 : _a.set;
      native === null || native === void 0 ? void 0 : native.call(numberInputRef.current, newValue);
      const inputEvent = new Event('input', {
        bubbles: true
      });
      numberInputRef.current.dispatchEvent(inputEvent);
    }
  };
  const handleArrowUp = () => {
    clearTimeout(intervalRef.current);
  };
  const handleInputBlur = event => {
    eventHandlers.handleInputBlurEvent(numberInputRef, event, onBlur);
  };
  const handleInputClick = event => {
    eventHandlers.handleInputClickEvent(numberInputRef, event, onClick);
  };
  const handleOnChange = event => {
    setValue(event.target.value);
    onChangeFromProps === null || onChangeFromProps === void 0 ? void 0 : onChangeFromProps(event);
  };
  return jsxRuntime.jsxs(inputFrame.CDSInputFrame, {
    prefix: prefix,
    suffix: jsxRuntime.jsx(index["default"], {
      type: "number",
      suffix: suffix,
      hasValue: !!value || value === 0,
      onClear: onClear,
      disabled: disabled
    }),
    size: size,
    bordered: bordered,
    sentiment: invalid && 'negative' || sentiment,
    className: classNames,
    style: style,
    disabled: disabled,
    label: label,
    optional: optional,
    tooltip: tooltip,
    required: rest.required,
    id: rest.id,
    fixedWidth: fixedWidth,
    type: "number",
    readOnly: readOnly,
    onBlur: handleInputBlur,
    onClick: handleInputClick,
    children: [jsxRuntime.jsx("input", {
      className: cdsComponentUtilities.cx(textInput_module["default"], 'cds-text-input'),
      ref: mergedInputRef,
      type: "number",
      disabled: disabled,
      step: step,
      min: min,
      max: max,
      readOnly: readOnly,
      value: valueFromProps !== null && valueFromProps !== void 0 ? valueFromProps : value,
      onChange: handleOnChange,
      ...rest
    }), !disabled && !readOnly ? jsxRuntime.jsxs("div", {
      className: cdsComponentUtilities.cx(numberInput_module["default"], 'cds-number-input__arrow-icons'),
      "data-testid": "cds-number-input--arrow-icons",
      children: [jsxRuntime.jsx(arrowButton.CDSArrowButton, {
        onMouseDown: e => handleArrowDown(e, 'up'),
        onMouseUp: handleArrowUp,
        className: upArrowClasses,
        icon: jsxRuntime.jsx(phosphorReact.CaretUp, {
          size: "8"
        }),
        hoveredIcon: jsxRuntime.jsx(phosphorReact.CaretDoubleUp, {
          size: "8"
        })
      }), jsxRuntime.jsx("span", {
        className: cdsComponentUtilities.cx(numberInput_module["default"], 'cds-number-input__arrow-icons__divider')
      }), jsxRuntime.jsx(arrowButton.CDSArrowButton, {
        onMouseDown: e => handleArrowDown(e, 'down'),
        onMouseUp: handleArrowUp,
        className: downArrowClasses,
        icon: jsxRuntime.jsx(phosphorReact.CaretDown, {
          size: "8"
        }),
        hoveredIcon: jsxRuntime.jsx(phosphorReact.CaretDoubleDown, {
          size: "8"
        })
      })]
    }) : '']
  });
});
CDSNumberInput.displayName = 'CDSNumberInput';
CDSNumberInput.defaultProps = {
  size: 'md',
  sentiment: 'control',
  bordered: true,
  invalid: false,
  prefix: undefined,
  suffix: undefined,
  tooltip: undefined,
  optional: undefined,
  label: undefined,
  fixedWidth: false,
  step: 1,
  value: undefined,
  min: undefined,
  max: undefined,
  className: '',
  onClear: undefined,
  onChange: undefined
};

exports.CDSNumberInput = CDSNumberInput;
exports["default"] = CDSNumberInput;
