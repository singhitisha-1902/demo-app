'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var ramda = require('ramda');

const mergeAxes = (defaultLineAxisProps, axes) => {
  if (axes) {
    if ('xAxis' in axes) {
      return ramda.mergeDeepRight(defaultLineAxisProps, axes);
    } else {
      return ramda.mergeDeepLeft(defaultLineAxisProps, axes);
    }
  } else {
    return defaultLineAxisProps;
  }
};
const numberify = texts => texts ? texts.map(text => Number(text)) : undefined;
const getAxes = (axes, gridX, gridY, fontSize) => {
  const {
    xAxis: x,
    yAxis: y
  } = axes;
  return {
    xScale: {
      type: x.type,
      min: x.min,
      max: x.max
    },
    yScale: {
      type: y.type,
      min: y.min,
      max: y.max
    },
    axisBottom: {
      tickSize: x.tickSize,
      legendOffset: 0,
      format: x.format,
      tickValues: x.tickValues,
      fontSize
    },
    axisLeft: {
      tickSize: y.tickSize,
      legendOffset: 0,
      format: y.format,
      tickValues: y.tickValues,
      fontSize
    },
    enableGridX: gridX,
    enableGridY: gridY,
    gridXValues: x.values || x.tickValues,
    gridYValues: numberify(y.values) || y.tickValues
  };
};

exports.getAxes = getAxes;
exports.mergeAxes = mergeAxes;
exports.numberify = numberify;
