import { forwardRef, useState, useRef } from 'react';
import { CaretUp, CaretDoubleUp, CaretDown, CaretDoubleDown } from 'phosphor-react';
import { useMergeRefs } from '@ciscodesignsystems/cds-component-types';
import { cx } from '@ciscodesignsystems/cds-component-utilities';
import { CDSArrowButton } from '../arrow-button/arrow-button.esm.js';
import { CDSInputFrame } from '../input-frame/input-frame.esm.js';
import SuffixComp from '../suffix/index.esm.js';
import { isUpArraowDisabled, isDownArraowDisabled, handleInputBlurEvent, handleInputClickEvent, handleIncrease, handleDecrease } from './event-handlers.esm.js';
import textInputStyles from '../../text-input.module.esm.js';
import styles from './number-input.module.esm.js';
import { jsxs, jsx } from 'react/jsx-runtime';

const CDSNumberInput = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    size,
    sentiment,
    bordered,
    disabled,
    invalid,
    prefix,
    suffix,
    className,
    style,
    label,
    optional,
    tooltip,
    fixedWidth,
    value: valueFromProps,
    step = 1,
    min,
    max,
    onClear,
    onChange: onChangeFromProps,
    defaultValue,
    readOnly,
    onClick,
    onBlur,
    type = 'number',
    ...rest
  } = props;
  const [value, setValue] = useState(defaultValue ?? valueFromProps ?? '');
  const classNames = cx(styles, {
    'cds-number-input': type === 'number',
    'cds-number-input__arrow-icons-visible': !disabled && !readOnly && type === 'number'
  }, className);
  const numberInputRef = useRef(null);
  const mergedInputRef = useMergeRefs([numberInputRef, ref]);
  const intervalRef = useRef();
  const upArrowClasses = cx(styles, 'cds-number-input__arrow-icons--color', {
    'cds-number-input__arrow-icons--disabled': isUpArraowDisabled(max, Number(value))
  });
  const downArrowClasses = cx(styles, 'cds-number-input__arrow-icons--color', {
    'cds-number-input__arrow-icons--disabled': isDownArraowDisabled(min, Number(value))
  });
  const handleArrowDown = (e, type) => {
    e.preventDefault();
    const increase = () => handleIncrease(max, min, step, Number(value));
    const decrease = () => handleDecrease(max, min, step, Number(value));
    const fn = type === 'up' ? increase : decrease;
    const newValue = fn();
    setValue(newValue);
    intervalRef.current = setInterval(fn, 500);
    if (numberInputRef.current !== null) {
      const native = Object.getOwnPropertyDescriptor(HTMLInputElement.prototype, 'value')?.set;
      native?.call(numberInputRef.current, newValue);
      const inputEvent = new Event('input', {
        bubbles: true
      });
      numberInputRef.current.dispatchEvent(inputEvent);
    }
  };
  const handleArrowUp = () => {
    clearTimeout(intervalRef.current);
  };
  const handleInputBlur = event => {
    handleInputBlurEvent(numberInputRef, event, onBlur);
  };
  const handleInputClick = event => {
    handleInputClickEvent(numberInputRef, event, onClick);
  };
  const handleOnChange = event => {
    setValue(event.target.value);
    onChangeFromProps?.(event);
  };
  return /*#__PURE__*/jsxs(CDSInputFrame, {
    prefix: prefix,
    suffix: /*#__PURE__*/jsx(SuffixComp, {
      type: "number",
      suffix: suffix,
      hasValue: !!value || value === 0,
      onClear: onClear,
      disabled: disabled
    }),
    size: size,
    bordered: bordered,
    sentiment: invalid && 'negative' || sentiment,
    className: classNames,
    style: style,
    disabled: disabled,
    label: label,
    optional: optional,
    tooltip: tooltip,
    required: rest.required,
    id: rest.id,
    fixedWidth: fixedWidth,
    type: "number",
    readOnly: readOnly,
    onBlur: handleInputBlur,
    onClick: handleInputClick,
    children: [/*#__PURE__*/jsx("input", {
      className: cx(textInputStyles, 'cds-text-input'),
      ref: mergedInputRef,
      type: "number",
      disabled: disabled,
      step: step,
      min: min,
      max: max,
      readOnly: readOnly,
      value: valueFromProps ?? value,
      onChange: handleOnChange,
      ...rest
    }), !disabled && !readOnly ? /*#__PURE__*/jsxs("div", {
      className: cx(styles, 'cds-number-input__arrow-icons'),
      "data-testid": "cds-number-input--arrow-icons",
      children: [/*#__PURE__*/jsx(CDSArrowButton, {
        onMouseDown: e => handleArrowDown(e, 'up'),
        onMouseUp: handleArrowUp,
        className: upArrowClasses,
        icon: /*#__PURE__*/jsx(CaretUp, {
          size: "8"
        }),
        hoveredIcon: /*#__PURE__*/jsx(CaretDoubleUp, {
          size: "8"
        })
      }), /*#__PURE__*/jsx("span", {
        className: cx(styles, 'cds-number-input__arrow-icons__divider')
      }), /*#__PURE__*/jsx(CDSArrowButton, {
        onMouseDown: e => handleArrowDown(e, 'down'),
        onMouseUp: handleArrowUp,
        className: downArrowClasses,
        icon: /*#__PURE__*/jsx(CaretDown, {
          size: "8"
        }),
        hoveredIcon: /*#__PURE__*/jsx(CaretDoubleDown, {
          size: "8"
        })
      })]
    }) : '']
  });
});
CDSNumberInput.displayName = 'CDSNumberInput';
CDSNumberInput.defaultProps = {
  size: 'md',
  sentiment: 'control',
  bordered: true,
  invalid: false,
  prefix: undefined,
  suffix: undefined,
  tooltip: undefined,
  optional: undefined,
  label: undefined,
  fixedWidth: false,
  step: 1,
  value: undefined,
  min: undefined,
  max: undefined,
  className: '',
  onClear: undefined,
  onChange: undefined
};

export { CDSNumberInput, CDSNumberInput as default };
