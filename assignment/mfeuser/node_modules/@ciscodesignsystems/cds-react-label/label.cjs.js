'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var phosphorReact = require('phosphor-react');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var cdsReactFlex = require('@ciscodesignsystems/cds-react-flex');
var cdsReactText = require('@ciscodesignsystems/cds-react-text');
var cdsReactTooltip = require('@ciscodesignsystems/cds-react-tooltip');
var index = require('./types/index.cjs.js');
var label_module = require('./label.module.cjs.js');

const CDSLabel = /*#__PURE__*/react.forwardRef((props, ref) => {
  const {
    children,
    className,
    disabled,
    infoMessage,
    optional,
    required,
    size = 'md',
    weight = 'bold',
    tooltipPlacement,
    ...rest
  } = props;
  const textSize = react.useMemo(() => index.CDSLabelSizeMap[size], [size]);
  const optionalText = typeof optional === 'string' ? optional : 'optional';
  const labelClasses = cdsComponentUtilities.cx(label_module["default"], 'cds-label', `cds-label--${size}`, {
    'cds-label--disabled': disabled
  }, className);
  return jsxRuntime.jsx(cdsReactText.CDSText, {
    ...rest,
    className: labelClasses,
    weight: weight,
    ref: ref,
    as: "label",
    size: textSize,
    children: jsxRuntime.jsxs(cdsReactFlex.CDSFlex, {
      align: "center",
      gap: "xxs",
      children: [children, required && jsxRuntime.jsx("span", {
        className: cdsComponentUtilities.cx(label_module["default"], 'cds-label__asterisk'),
        "aria-label": "required",
        children: "*"
      }), optional && !required && jsxRuntime.jsxs("span", {
        className: cdsComponentUtilities.cx(label_module["default"], 'cds-label__optional'),
        children: ["(", optionalText, ")"]
      }), infoMessage && jsxRuntime.jsx(cdsReactTooltip.CDSTooltip, {
        title: infoMessage,
        placement: tooltipPlacement,
        children: jsxRuntime.jsx(phosphorReact.Info, {
          weight: "bold"
        })
      })]
    })
  });
});
CDSLabel.displayName = 'CDSLabel';
CDSLabel.defaultProps = {
  disabled: false,
  infoMessage: '',
  optional: false,
  required: false,
  tooltipPlacement: 'top'
};

exports.CDSLabel = CDSLabel;
exports["default"] = CDSLabel;
