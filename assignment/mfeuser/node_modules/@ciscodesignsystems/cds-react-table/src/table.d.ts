import { type ComponentPropsWithRef, type Dispatch, type ReactElement, type ReactNode, type SetStateAction } from 'react';
import { type ColumnDef, type ColumnPinningState, type OnChangeFn, type PaginationState, type Row, type RowData, type SortingState, type TableOptions } from '@tanstack/react-table';
import type { AllOrNone, Either } from '@ciscodesignsystems/cds-component-types';
import { CDSTableFilterBar } from './components/table-filter-bar/table-filter-bar';
import type { CDSTableBulkActionBarConfig, CDSTableColumnFilters, CDSTableOnReorderRowFn, CDSTableOnRowClickFn, CDSTableSize } from './types';
export type CDSTableSelection = Record<number, boolean>;
type CDSTableSelectionProps = {
    rowSelection: CDSTableSelection;
    onRowSelectionChange: Dispatch<SetStateAction<CDSTableSelection>>;
};
export type CDSTablePaginationConfig<TData extends RowData> = {
    /**
     * The current page size.
     *
     * @required
     */
    pageSize: number;
    /**
     * Controls when to show the page size changer.
     *
     * @required
     */
    showPageSizeChanger: boolean;
    /**
     * The options of page size for the user to select.
     *
     * @default []
     */
    pageSizeOptions?: number[];
    /**
     * The current page index, used when `manualPagination` is set to `true`.
     */
    pageIndex?: number;
    /**
     * When `manualPagination` is set to `true`, you must pass page count.
     *
     * @default undefined
     */
    pageCount?: number;
    /**
     * Controls the table pagination state when `manualPagination` is set to `true`.
     *
     * @default undefined
     */
    paginationState?: PaginationState;
    /**
     * Function to be called when a pagination change has ocurred when `manualPagination` is set to `true`.
     *
     * @default undefined
     */
    onPaginationChange?: OnChangeFn<PaginationState>;
    /**
     * Function to uniquely identify a row.  This is useful when using selectable rows with manual pagination to ensure items are correctly selected when changing pages.
     *
     * @default undefined
     */
    getRowId?: TableOptions<TData>['getRowId'];
};
export type CDSTableRowExpansionConfig<TData extends RowData> = {
    /**
     * A customized render method with access to the row object.
     * @param row
     * @returns ReactNode
     *
     * @required
     */
    expandedRowRender: (row: Row<TData>) => ReactNode;
    /**
     * A customized method for detecting when a row is expandable.
     * @param row
     * @returns boolean
     *
     * @required
     */
    getRowCanExpand: (row: Row<TData>) => boolean;
};
type CDSTableRowExpansionProps<TData extends RowData> = {
    /**
     * Enables row expansion for the table.
     *
     * @default false
     */
    enableExpanding: boolean;
    /**
     * The required configuration for the row expansion feature.
     *
     * @default undefined
     */
    rowExpansionConfig: CDSTableRowExpansionConfig<TData>;
};
type CDSTableRowReorderProps<TData extends RowData> = {
    /**
     * Allows for rows to be sorted by drag and drop interaction.
     *
     * @default false
     */
    enableReorderRows: boolean;
    /**
     * A customized method for sorting rows.
     */
    onReorderRow: CDSTableOnReorderRowFn<TData>;
};
export type CDSTableProps<TData extends RowData> = Omit<ComponentPropsWithRef<'table'>, 'title'> & AllOrNone<CDSTableSelectionProps> & AllOrNone<CDSTableRowExpansionProps<TData>> & AllOrNone<CDSTableRowReorderProps<TData>> & {
    columns: ColumnDef<TData>[];
    /**
     * JSON data of the information to show in the table. If length equals 0, it will show the table in its empty state.
     *
     * @required
     */
    data: TData[];
    /**
     * Spacing around the table cells.
     *
     * @default undefined
     */
    size?: CDSTableSize;
    /**
     * Keeps the header of a table in the same place relative to the table while the user scrolls down the page.
     *
     * @default false
     */
    sticky?: boolean;
    /**
     * Allows a user to see the total number of pages and navigate to a specific page.
     *
     * @default false
     */
    pagination?: boolean;
    /**
     * Allows for configuring the pagination of the table.
     *
     * @default { pageSize: 30, showPageSizeChanger: true, pageSizeOptions:  [30, 50, 100] }
     */
    paginationConfig?: CDSTablePaginationConfig<TData>;
    /**
     * Configuration object for the action bar
     *
     * @default {}
     */
    actionBarConfig?: CDSTableBulkActionBarConfig;
    /**
     * Classname to append onto the pagination container
     *
     * @default undefined
     */
    paginationClassName?: string;
    /**
     * Column filters to apply to the table. See https://tanstack.com/table/v8/docs/api/features/filters for more information.
     *
     * @default false
     */
    columnFilters?: CDSTableColumnFilters;
    /**
     * Children to display above the table element, but within the CDSTableContext provider
     */
    children?: ReactNode;
    /**
     * Allows configuration of visible columns.
     *
     * @default false
     */
    enableColumnsDisplaySettings?: boolean;
    /**
     * Allows for a custom column configuration for the settings column.
     */
    displaySettingsColumnDef?: ColumnDef<TData>;
    /**
     * Allows for columns to be sorted by drag and drop interaction.
     *
     * @default false
     */
    enableSortColumns?: boolean;
    /**
     * Enables manual control of pagination for lazy loading.
     *
     * @default false
     */
    manualPagination?: boolean;
    /**
     * A callback to sorting the table when using manualPagination.
     *
     * @default undefined
     */
    onSortingChange?: (sorting: SortingState) => void;
    /**
     * Shows the loading state for the table
     *
     * @default false
     */
    loading?: boolean;
    /**
     * Enables column pinning for the table.
     *
     * @default false
     */
    enablePinning?: boolean;
    /**
     * The table column state of the pinned columns.
     *
     * @default { left: [], right: [] }
     */
    columnPinningState?: ColumnPinningState;
    /**
     * An onClick handler for the table row. As a guideline, must only be used when no other clickable element exist in the entire row.
     *
     * @default undefined
     */
    onRowClick?: CDSTableOnRowClickFn<TData>;
} & Either<{
    /**
     * The message to display when the table is in its empty state, it overrides the table's default empty state message.
     */
    emptyStateMessage?: ReactNode;
}, {
    /**
     * Optional table Empty State, it overrides the table's default empty state.
     */
    emptyState?: ReactNode;
}>;
declare const CDSTableNamespace: (<TData extends unknown>(props: CDSTableProps<TData>, ref: HTMLTableElement) => ReactElement) & {
    FilterBar: import("react").ForwardRefExoticComponent<Omit<CDSTableFilterBar, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
};
export { CDSTableNamespace as CDSTable };
export default CDSTableNamespace;
