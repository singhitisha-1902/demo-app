import type { ComponentPropsWithoutRef, Dispatch, ReactNode, SetStateAction } from 'react';
import type { ColumnFiltersState, Row, RowData, SortingState, Table } from '@tanstack/react-table';
export interface CDSTableColumnMetaType {
    align?: 'left' | 'right' | 'center';
    columnVisibilityFilterLabel?: string;
    expanded?: ReactNode;
    isHidden?: boolean;
}
export declare const CDSTableSizeArray: readonly ["comfy", "compact", "spacious"];
export type CDSTableSize = (typeof CDSTableSizeArray)[number];
export type CDSTableBulkActionBarConfig = ComponentPropsWithoutRef<'div'> & {
    cancelSelectionText?: ReactNode;
    itemsSelectedText?: ReactNode;
    selectAllText?: ReactNode;
};
export type CDSTableColumnFilters = ColumnFiltersState;
export type CDSTableContext<TData extends RowData> = {
    globalFilter: string;
    setGlobalFilter?: Dispatch<SetStateAction<string>>;
    table?: Table<TData>;
    manualPagination?: boolean;
};
export type CDSTableOnReorderRowEvent<TData extends RowData> = {
    draggedRowIndex: number;
    targetRowIndex: number;
    updatedData: TData[];
};
export type CDSTableOnReorderRowFn<TData> = (onReorderRowEvent: CDSTableOnReorderRowEvent<TData>) => void;
export type CDSTableOnRowClickFn<TData> = (event: React.MouseEvent<HTMLTableRowElement, MouseEvent>, row: Row<TData>) => void;
export type CDSTableOnSortingChangeFn = (sorting: SortingState) => void;
export type CDSTableOnGlobalSearchChangeFn = (event: React.ChangeEvent<HTMLInputElement>) => void;
