'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var reactTable = require('@tanstack/react-table');
var phosphorReact = require('phosphor-react');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var cdsReactFlex = require('@ciscodesignsystems/cds-react-flex');
var cdsReactSkeleton = require('@ciscodesignsystems/cds-react-skeleton');
var getPinnedStatus = require('../../util/getPinnedStatus.cjs.js');
var tableHeader_module = require('./table-header.module.cjs.js');

const TableHeaderComponent = ({
  header,
  className,
  loading = false,
  pinnedPosition = undefined,
  ...rest
}, ref) => {
  var _a, _b;
  const align = (_b = (_a = header.column.columnDef.meta) === null || _a === void 0 ? void 0 : _a.align) !== null && _b !== void 0 ? _b : 'left';
  const canSort = header.column.getCanSort();
  const sorted = header.column.getIsSorted();
  const {
    isPinned,
    pinnedClasses
  } = getPinnedStatus.getPinnedStatus(header.column);
  const headerClasses = cdsComponentUtilities.cx(tableHeader_module["default"], 'cds-table__header', {
    'cds-table__header--sortable': !loading && canSort,
    [`cds-table__header--align-${align}`]: !loading && align,
    [pinnedClasses]: !loading
  }, className);
  const iconClasses = cdsComponentUtilities.cx(tableHeader_module["default"], 'cds-table__header__sort-icons', {
    'cds-table__header__sort-icons--asc': sorted === 'asc',
    'cds-table__header__sort-icons--desc': sorted === 'desc'
  });
  return jsxRuntime.jsx("th", {
    ref: ref,
    className: headerClasses,
    onClick: header.column.getToggleSortingHandler(),
    style: {
      ...(!loading ? {
        width: header.column.columnDef.size,
        minWidth: header.column.columnDef.minSize,
        maxWidth: header.column.columnDef.maxSize,
        left: isPinned === 'left' ? `${pinnedPosition}px` : undefined,
        right: isPinned === 'right' ? `${pinnedPosition}px` : undefined
      } : {})
    },
    ...rest,
    children: loading ? jsxRuntime.jsx(cdsReactSkeleton.CDSSkeleton, {
      shade: "dark",
      height: "sm"
    }) : jsxRuntime.jsxs(cdsReactFlex.CDSFlex, {
      gap: 4,
      children: [jsxRuntime.jsx("div", {
        className: cdsComponentUtilities.cx(tableHeader_module["default"], 'cds-table__header__title'),
        children: reactTable.flexRender(header.column.columnDef.header, header.getContext())
      }), canSort && jsxRuntime.jsxs(cdsReactFlex.CDSFlex, {
        direction: "vertical",
        justify: "center",
        className: iconClasses,
        children: [jsxRuntime.jsx(phosphorReact.Triangle, {
          weight: "fill",
          size: 8,
          className: cdsComponentUtilities.cx(tableHeader_module["default"], 'cds-table__header__sort-icons__caret-up')
        }), jsxRuntime.jsx(phosphorReact.Triangle, {
          weight: "fill",
          size: 8,
          className: cdsComponentUtilities.cx(tableHeader_module["default"], 'cds-table__header__sort-icons__caret-down')
        })]
      })]
    })
  }, header.id);
};
const TableHeader = /*#__PURE__*/react.forwardRef(TableHeaderComponent);

exports.TableHeader = TableHeader;
