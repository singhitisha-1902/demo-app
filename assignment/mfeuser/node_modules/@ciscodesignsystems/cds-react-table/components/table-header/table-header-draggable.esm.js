import { forwardRef } from 'react';
import { useDrop, useDrag } from 'react-dnd';
import { useMergeRefs } from '@ciscodesignsystems/cds-component-types';
import { cx } from '@ciscodesignsystems/cds-component-utilities';
import { TableHeader } from './table-header.esm.js';
import styles from './table-header-draggable.module.esm.js';
import { jsx } from 'react/jsx-runtime';

const reorderColumn = (draggedColumnId, targetColumnId, columnOrder) => {
  columnOrder.splice(columnOrder.indexOf(targetColumnId), 0, columnOrder.splice(columnOrder.indexOf(draggedColumnId), 1)[0]);
  return [...columnOrder];
};
const TableHeaderDraggableComponent = ({
  header,
  ...rest
}, ref) => {
  const {
    table
  } = header.getContext();
  const {
    getState,
    setColumnOrder
  } = table;
  const {
    columnOrder
  } = getState();
  const {
    column
  } = header;
  const canOrder = table.getIsSomeColumnsPinned() ? column.getCanPin() && column.getIsPinned() === false : true;
  const [{
    isOverCurrent,
    canDrop,
    dropZoneSide
  }, dropRef] = useDrop({
    accept: 'column',
    drop: draggedColumn => {
      const isColumnPinned = column.getIsPinned();
      const canPinDraggedColumn = draggedColumn.getCanPin();
      if (isColumnPinned !== false && canPinDraggedColumn) {
        draggedColumn.pin(isColumnPinned);
        return;
      }
      const newColumnOrder = reorderColumn(draggedColumn.id, column.id, columnOrder);
      setColumnOrder(newColumnOrder);
    },
    collect: monitor => ({
      canDrop: monitor.canDrop(),
      isOverCurrent: monitor.isOver({
        shallow: true
      }),
      dropZoneSide: columnOrder.indexOf(monitor.getItem()?.id) > columnOrder.indexOf(column.id) ? 'left' : 'right'
    }),
    canDrop: () => true
  });
  const [{
    isDragging
  }, dragRef, previewRef] = useDrag({
    collect: monitor => ({
      isDragging: monitor.isDragging()
    }),
    item: () => column,
    type: 'column',
    canDrag: () => canOrder
  });
  const mergedRefs = useMergeRefs([ref, dragRef, dropRef, previewRef]);
  const draggableHeaderClasses = cx(styles, {
    'cds-table__header--draggable': canOrder,
    'cds-table__header--draggable--is-dragging': isDragging,
    [`cds-table__header--not-droppable`]: isOverCurrent && !canDrop,
    [`cds-table__header--droppable--${dropZoneSide}`]: isOverCurrent && canDrop
  });
  return /*#__PURE__*/jsx(TableHeader, {
    ...rest,
    ref: mergedRefs,
    className: draggableHeaderClasses,
    header: header
  });
};
const TableHeaderDraggable = /*#__PURE__*/forwardRef(TableHeaderDraggableComponent);

export { TableHeaderDraggable, TableHeaderDraggableComponent };
