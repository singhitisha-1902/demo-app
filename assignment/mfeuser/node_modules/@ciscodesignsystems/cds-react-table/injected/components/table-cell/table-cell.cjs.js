'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var reactTable = require('@tanstack/react-table');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var getPinnedStatus = require('../../util/getPinnedStatus.cjs.js');
var tableCell_module = require('./table-cell.module.cjs.js');

const TableCell = ({
  cell,
  pinnedPosition = undefined,
  children = undefined
}) => {
  var _a, _b;
  const align = (_b = (_a = cell.column.columnDef.meta) === null || _a === void 0 ? void 0 : _a.align) !== null && _b !== void 0 ? _b : 'left';
  const {
    isPinned,
    pinnedClasses
  } = getPinnedStatus.getPinnedStatus(cell.column);
  const isSelected = cell.row.getIsSelected();
  const cellClassNames = cdsComponentUtilities.cx(tableCell_module["default"], 'cds-table__cell', {
    'cds-table__cell--selected': isSelected
  }, pinnedClasses);
  return jsxRuntime.jsx("td", {
    className: cellClassNames,
    align: align,
    style: {
      left: isPinned === 'left' ? `${pinnedPosition}px` : undefined,
      right: isPinned === 'right' ? `${pinnedPosition}px` : undefined
    },
    children: children !== null && children !== void 0 ? children : reactTable.flexRender(cell.column.columnDef.cell, cell.getContext())
  });
};

exports.TableCell = TableCell;
