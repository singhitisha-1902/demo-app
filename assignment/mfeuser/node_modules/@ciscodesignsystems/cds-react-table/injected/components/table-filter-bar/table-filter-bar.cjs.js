'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var phosphorReact = require('phosphor-react');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var injected$2 = require('@ciscodesignsystems/cds-react-button/injected');
var injected$3 = require('@ciscodesignsystems/cds-react-drawer/injected');
var injected = require('@ciscodesignsystems/cds-react-flex/injected');
var injected$1 = require('@ciscodesignsystems/cds-react-text-input/injected');
var index = require('../../context/index.cjs.js');
var tableFilterBar_module = require('./table-filter-bar.module.cjs.js');

const CDSTableFilterBar = /*#__PURE__*/react.forwardRef((props, ref) => {
  const {
    keyFilterChildren,
    filterDrawerChildren,
    showGlobalSearch,
    globalSearchPlaceholder,
    filterDrawerToggleText,
    children,
    className,
    onGlobalSearchChange,
    ...rest
  } = props;
  const [showFilterDrawer, setShowFilterDrawer] = react.useState(false);
  const {
    globalFilter,
    setGlobalFilter,
    manualPagination
  } = index.useTableContext();
  const globalSearchOnChangeHandler = event => {
    if (manualPagination) {
      onGlobalSearchChange === null || onGlobalSearchChange === void 0 ? void 0 : onGlobalSearchChange(event);
    }
    setGlobalFilter === null || setGlobalFilter === void 0 ? void 0 : setGlobalFilter(String(event.target.value));
  };
  const classes = cdsComponentUtilities.cx(tableFilterBar_module["default"], 'cds-table__filter-bar', className);
  return jsxRuntime.jsxs(injected.CDSFlex, {
    ...rest,
    className: classes,
    direction: "horizontal",
    gap: "md",
    margin: {
      bottom: 12
    },
    ref: ref,
    children: [showGlobalSearch ? jsxRuntime.jsx(injected$1.CDSTextInput, {
      value: globalFilter,
      onChange: globalSearchOnChangeHandler,
      fixedWidth: true,
      className: cdsComponentUtilities.cx(tableFilterBar_module["default"], 'cds-table-search-input'),
      placeholder: globalSearchPlaceholder
    }) : null, keyFilterChildren, filterDrawerChildren ? jsxRuntime.jsxs(jsxRuntime.Fragment, {
      children: [jsxRuntime.jsxs(injected$2.CDSButton, {
        variant: "tertiary",
        onClick: () => setShowFilterDrawer(prev => !prev),
        children: [jsxRuntime.jsx(phosphorReact.FunnelSimple, {
          weight: "bold",
          size: 16
        }), filterDrawerToggleText]
      }), jsxRuntime.jsxs(injected$3.CDSDrawer, {
        isOpen: showFilterDrawer,
        onClose: () => setShowFilterDrawer(false),
        children: [jsxRuntime.jsx(injected$3.CDSDrawer.Heading, {
          children: "Filters"
        }), jsxRuntime.jsx(injected$3.CDSDrawer.Content, {
          children: filterDrawerChildren
        })]
      })]
    }) : null, children]
  });
});
CDSTableFilterBar.displayName = 'CDSTable.FilterBar';
CDSTableFilterBar.defaultProps = {
  filterDrawerChildren: undefined,
  filterDrawerToggleText: 'Filters',
  keyFilterChildren: undefined,
  showGlobalSearch: true,
  globalSearchPlaceholder: 'Search',
  children: undefined,
  onGlobalSearchChange: undefined
};

exports.CDSTableFilterBar = CDSTableFilterBar;
