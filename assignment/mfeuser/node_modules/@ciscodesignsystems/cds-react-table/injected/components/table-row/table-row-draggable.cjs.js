'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var reactDnd = require('react-dnd');
var phosphorReact = require('phosphor-react');
var cdsComponentTypes = require('@ciscodesignsystems/cds-component-types');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var injected = require('@ciscodesignsystems/cds-react-button/injected');
var tableRow = require('./table-row.cjs.js');
var tableRowDraggable_module = require('./table-row-draggable.module.cjs.js');

const TableRowDraggable = ({
  table,
  row,
  onReorderRow,
  pinnedPositions = undefined,
  ...rest
}) => {
  const [{
    isOverCurrent,
    canDrop,
    dropZoneSide
  }, dropRef] = reactDnd.useDrop({
    accept: 'row',
    drop: draggedRow => {
      const copiedData = [...table.options.data];
      copiedData.splice(row.index, 0, copiedData.splice(draggedRow.index, 1)[0]);
      if (table.getIsSomeRowsExpanded()) table.resetExpanded();
      onReorderRow === null || onReorderRow === void 0 ? void 0 : onReorderRow({
        draggedRowIndex: draggedRow.index,
        targetRowIndex: row.index,
        updatedData: copiedData
      });
    },
    collect: monitor => {
      var _a;
      return {
        canDrop: monitor.canDrop(),
        isOverCurrent: monitor.isOver({
          shallow: true
        }),
        dropZoneSide: ((_a = monitor.getItem()) === null || _a === void 0 ? void 0 : _a.index) > row.index ? 'top' : 'bottom'
      };
    },
    canDrop: item => item.index !== row.index
  });
  const [{
    isDragging
  }, dragRef, previewRef] = reactDnd.useDrag({
    collect: monitor => ({
      isDragging: monitor.isDragging()
    }),
    item: () => row,
    type: 'row'
  });
  const draggableRowClassNames = cdsComponentUtilities.cx(tableRowDraggable_module["default"], 'cds-table__row--draggable', {
    'cds-table__row--draggable--is-dragging': isDragging,
    [`cds-table__row--droppable--${dropZoneSide}`]: isOverCurrent && canDrop
  });
  const draggableCellButtonClassNames = cdsComponentUtilities.cx(tableRowDraggable_module["default"], 'cds-table__cell__drag-trigger', {
    'cds-table__cell__drag-trigger--is-dragging': isDragging
  });
  const rowRefs = cdsComponentTypes.useMergeRefs([previewRef, dropRef]);
  return jsxRuntime.jsx(tableRow.TableRow, {
    ref: rowRefs,
    className: draggableRowClassNames,
    pinnedPositions: pinnedPositions,
    row: row,
    dragComponent: jsxRuntime.jsx(injected.CDSButton, {
      ref: dragRef,
      variant: "tertiary",
      className: draggableCellButtonClassNames,
      children: jsxRuntime.jsx(phosphorReact.DotsSixVertical, {
        size: 18,
        weight: "bold"
      })
    }),
    ...rest
  });
};

exports.TableRowDraggable = TableRowDraggable;
