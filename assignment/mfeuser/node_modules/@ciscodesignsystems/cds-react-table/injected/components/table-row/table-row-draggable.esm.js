import { useDrop, useDrag } from 'react-dnd';
import { DotsSixVertical } from 'phosphor-react';
import { useMergeRefs } from '@ciscodesignsystems/cds-component-types';
import { cx } from '@ciscodesignsystems/cds-component-utilities';
import { CDSButton } from '@ciscodesignsystems/cds-react-button/injected';
import { TableRow } from './table-row.esm.js';
import styles from './table-row-draggable.module.esm.js';
import { jsx } from 'react/jsx-runtime';

const TableRowDraggable = ({
  table,
  row,
  onReorderRow,
  pinnedPositions = undefined,
  ...rest
}) => {
  const [{
    isOverCurrent,
    canDrop,
    dropZoneSide
  }, dropRef] = useDrop({
    accept: 'row',
    drop: draggedRow => {
      const copiedData = [...table.options.data];
      copiedData.splice(row.index, 0, copiedData.splice(draggedRow.index, 1)[0]);
      if (table.getIsSomeRowsExpanded()) table.resetExpanded();
      onReorderRow?.({
        draggedRowIndex: draggedRow.index,
        targetRowIndex: row.index,
        updatedData: copiedData
      });
    },
    collect: monitor => ({
      canDrop: monitor.canDrop(),
      isOverCurrent: monitor.isOver({
        shallow: true
      }),
      dropZoneSide: monitor.getItem()?.index > row.index ? 'top' : 'bottom'
    }),
    canDrop: item => item.index !== row.index
  });
  const [{
    isDragging
  }, dragRef, previewRef] = useDrag({
    collect: monitor => ({
      isDragging: monitor.isDragging()
    }),
    item: () => row,
    type: 'row'
  });
  const draggableRowClassNames = cx(styles, 'cds-table__row--draggable', {
    'cds-table__row--draggable--is-dragging': isDragging,
    [`cds-table__row--droppable--${dropZoneSide}`]: isOverCurrent && canDrop
  });
  const draggableCellButtonClassNames = cx(styles, 'cds-table__cell__drag-trigger', {
    'cds-table__cell__drag-trigger--is-dragging': isDragging
  });
  const rowRefs = useMergeRefs([previewRef, dropRef]);
  return /*#__PURE__*/jsx(TableRow, {
    ref: rowRefs,
    className: draggableRowClassNames,
    pinnedPositions: pinnedPositions,
    row: row,
    dragComponent: /*#__PURE__*/jsx(CDSButton, {
      ref: dragRef,
      variant: "tertiary",
      className: draggableCellButtonClassNames,
      children: /*#__PURE__*/jsx(DotsSixVertical, {
        size: 18,
        weight: "bold"
      })
    }),
    ...rest
  });
};

export { TableRowDraggable };
