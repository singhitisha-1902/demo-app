'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var injected$3 = require('@ciscodesignsystems/cds-react-button/injected');
var injected$2 = require('@ciscodesignsystems/cds-react-checkbox/injected');
var injected = require('@ciscodesignsystems/cds-react-drawer/injected');
var injected$1 = require('@ciscodesignsystems/cds-react-flex/injected');
var constants = require('../../util/constants.cjs.js');
var tableSettings_module = require('./table-settings.module.cjs.js');

const CDSTableConfiguration = ({
  table,
  onClose,
  ...rest
}) => {
  const [columns, setColumns] = react.useState([]);
  react.useEffect(() => {
    setColumns(table.getAllLeafColumns().filter(column => !constants.EXCLUDED_COLUMNS.includes(column.id) && !column.getIsVisible()));
  }, [table]);
  const handleColumnVisibilityChange = react.useCallback(columnToAdd => {
    if (columns.filter(column => column.id === columnToAdd.id).length > 0) {
      setColumns([...columns.filter(column => column.id !== columnToAdd.id)]);
      return;
    }
    setColumns([...columns, columnToAdd]);
  }, [columns, setColumns]);
  const updateTableVisibility = react.useCallback(() => {
    const newVisibilityState = table.getAllLeafColumns().filter(column => !constants.EXCLUDED_COLUMNS.includes(column.id)).reduce((prev, curr) => ({
      ...prev,
      [curr.id]: columns.filter(column => column.id === curr.id).length === 0
    }), {});
    table.setColumnVisibility(newVisibilityState);
  }, [columns, table]);
  return jsxRuntime.jsxs(injected.CDSDrawer, {
    onClose: onClose,
    ...rest,
    children: [jsxRuntime.jsx(injected.CDSDrawer.Heading, {
      children: "Select columns"
    }), jsxRuntime.jsxs(injected.CDSDrawer.Content, {
      children: [jsxRuntime.jsx("p", {
        className: cdsComponentUtilities.cx(tableSettings_module["default"], 'cds-table__settings-drawer__description'),
        children: "Select columns to display in the table"
      }), jsxRuntime.jsx("hr", {
        className: cdsComponentUtilities.cx(tableSettings_module["default"], 'cds-table__settings-drawer__divider')
      }), jsxRuntime.jsx(injected$1.CDSFlex, {
        direction: "vertical",
        gap: 4,
        margin: [8, 0],
        className: cdsComponentUtilities.cx(tableSettings_module["default"], 'cds-table__settings-drawer__columns'),
        children: table.getAllLeafColumns().filter(column => !constants.EXCLUDED_COLUMNS.includes(column.id)).map(column => {
          var _a;
          return jsxRuntime.jsx(injected$2.CDSCheckbox, {
            id: column.id,
            checked: columns.filter(value => value.id === column.id).length === 0,
            disabled: !column.getCanHide() || column.getIsPinned() !== false,
            onChange: () => {
              handleColumnVisibilityChange(column);
            },
            children: (_a = column.columnDef.meta) === null || _a === void 0 ? void 0 : _a.columnVisibilityFilterLabel
          }, column.id);
        })
      })]
    }), jsxRuntime.jsxs(injected.CDSDrawer.Footer, {
      children: [jsxRuntime.jsx(injected$3.CDSButton, {
        variant: "tertiary",
        onClick: onClose,
        children: "Cancel"
      }), jsxRuntime.jsx(injected$3.CDSButton, {
        variant: "primary",
        onClick: event => {
          updateTableVisibility();
          onClose === null || onClose === void 0 ? void 0 : onClose(event);
        },
        children: "Apply"
      })]
    })]
  });
};

exports.CDSTableConfiguration = CDSTableConfiguration;
