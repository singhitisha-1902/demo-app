import { useMemo } from 'react';
import { Gear } from 'phosphor-react';
import { CDSButton } from '@ciscodesignsystems/cds-react-button/injected';
import { TableCellWithExpandedIndication } from '../../components/table-cell/table-cell-with-expanded-indicator.esm.js';
import { TableCellWithSelectedIndicator } from '../../components/table-cell/table-cell-with-selected-indicator.esm.js';
import { TableHeaderWithSelectedIndicator } from '../../components/table-header/table-header-with-selected-indicator.esm.js';
import { jsx } from 'react/jsx-runtime';

const useColumns = ({
  enableReorderRows,
  expandable,
  selectable,
  columns,
  enableColumnsDisplaySettings,
  displaySettingsColumnDef,
  displaySettingsOnClick,
  size
}) => {
  const finalColumnsDef = useMemo(() => {
    const settingsColumnSizeMap = new Map([['compact', 38], ['comfy', 46], ['spacious', 54]]);
    return [...(enableReorderRows ? [{
      id: 'row-sort-dnd',
      header: undefined,
      size: 20,
      minSize: 20,
      maxSize: 20,
      enableSorting: false,
      enableResizing: false,
      enablePinning: true,
      meta: {
        align: 'center'
      }
    }] : []), ...(expandable ? [{
      id: 'expand',
      cell: TableCellWithExpandedIndication,
      size: 20,
      minSize: 20,
      maxSize: 20,
      enableSorting: false,
      enableResizing: false,
      enablePinning: true,
      meta: {
        align: 'center'
      }
    }] : []), ...(selectable ? [{
      id: 'select',
      header: TableHeaderWithSelectedIndicator,
      cell: TableCellWithSelectedIndicator,
      size: 20,
      minSize: 20,
      maxSize: 20,
      enableSorting: false,
      enableResizing: false,
      enablePinning: true
    }] : []), ...columns, ...(enableColumnsDisplaySettings ? [{
      ...(displaySettingsColumnDef ?? {}),
      id: 'settings',
      header: () => /*#__PURE__*/jsx(CDSButton, {
        variant: "tertiary",
        onClick: displaySettingsOnClick,
        className: "cds-table__header__title__configuration-button",
        children: /*#__PURE__*/jsx(Gear, {
          size: 18,
          weight: "bold"
        })
      }),
      size: settingsColumnSizeMap.get(size ?? 'compact'),
      minSize: settingsColumnSizeMap.get(size ?? 'compact'),
      maxSize: settingsColumnSizeMap.get(size ?? 'compact'),
      enableSorting: false,
      enableResizing: false,
      enablePinning: true,
      meta: {
        align: 'right'
      }
    }] : [])];
  }, [enableReorderRows, expandable, selectable, columns, enableColumnsDisplaySettings, displaySettingsColumnDef, displaySettingsOnClick, size]);
  return finalColumnsDef;
};

export { useColumns };
