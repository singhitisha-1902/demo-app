import { type ElementType, type FC, type ReactElement } from 'react';
import { type Margin, type PolymorphicComponentPropWithRef } from '@ciscodesignsystems/cds-component-types';
import type { CDSFlexAlignment, CDSFlexDirection, CDSFlexGap, CDSFlexJustification } from './types';
export type CDSFlexProps<C extends ElementType = 'div'> = PolymorphicComponentPropWithRef<C, {
    /**
    * Provides access to add margin for children within the container.
    *
    * Accepts type MarginNumber
    | [MarginNumber]
    | [MarginNumber, MarginNumber]
    | [MarginNumber, MarginNumber, MarginNumber]
    | [MarginNumber, MarginNumber, MarginNumber, MarginNumber]
    | MarginObject
    *
    * Defaults to `0`.
    */
    margin?: Margin;
    /**
     * Provides access to aligning children within the container.
     *
     * Accepts `flex-start`, `flex-end`, `center`, `baseline`, `stretch`.
     *
     * Defaults to `stretch`.
     */
    align?: CDSFlexAlignment;
    /**
     * Provides access to vertical or horizontal layout.
     *
     * Defaults to `horizontal`.
     */
    direction?: CDSFlexDirection;
    /**
     * Introduces gaps between elements in the `Flex` component.
     *
     * Accepts t-shirt sizes (`none`, `xxs`, `xs`, `sm`, `md`, `lg`, `xl`, `xxl`)
     * or specific numerical values that corresponds to the Magnetic spacing scale
     * (0, 2, 4, 8, 12, 16, 24, 32).
     *
     * Defaults to `0`.
     */
    gap?: CDSFlexGap;
    /**
     * Scales children's containers
     *
     * Defaults to `false`.
     */
    grow?: boolean;
    /**
     * Provides access to flex justification.
     *
     * Accepts `flex-start`, `flex-end`, `center`, `space-between`, `space-around`, `space-evenly`.
     *
     * Defaults to `flex-start`.
     */
    justify?: CDSFlexJustification;
    /**
     * Allows reversal of the vertical or horizontal layout.
     *
     * Defaults to `false`.
     */
    reverse?: boolean;
    /**
     * Whether the children will wrap when the parent becomes too narrow to visually contain them.
     *
     * Defaults to `false`.
     */
    wrap?: boolean;
}>;
type CDSFlexComponent = FC & (<C extends ElementType = 'div'>(props: CDSFlexProps<C>) => ReactElement | null);
export declare const CDSFlex: CDSFlexComponent;
export default CDSFlex;
