const itemPropName = 'label';
function characterSearch(q, label) {
  const indices = q.split('').reduce((prev, currentChar, index) => {
    const lastIndex = prev[index - 1] ?? -1;
    const nextIndex = label.indexOf(currentChar, lastIndex + 1);
    return [...prev, nextIndex];
  }, []);
  if (indices.some(index => index === -1)) {
    return false;
  }
  return indices;
}
function getHighlightedValue(label, indexArr) {
  return label.split('').map((char, index) => indexArr.indexOf(index) > -1 ? `<strong>${char}</strong>` : char).join('');
}
function useTypeahead(props) {
  const {
    inputValue,
    items = [],
    enabled
  } = props;
  if (!enabled || !inputValue || inputValue.length === 0) {
    return [];
  }
  return items.map(item => {
    const value = item[itemPropName];
    const index = characterSearch(inputValue.toLowerCase(), value.toLowerCase());
    return {
      ...item,
      suggestion: index ? getHighlightedValue(value, index) : undefined
    };
  }).filter(item => item.suggestion);
}

export { useTypeahead };
