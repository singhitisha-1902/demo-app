import type { Dispatch, RefObject, SetStateAction } from 'react';
import { type CDSOption } from '..';
export declare const tabIndex: (withSearch: boolean) => {
    tabIndex: number;
} | {
    tabIndex?: undefined;
};
type focusType = {
    triggerManualFocus: boolean;
};
type handleBlurWhenFocusedOnOptionsDivProps = {
    isOpen: boolean;
    multiple?: boolean;
    showSearchInput?: boolean;
    focus: focusType;
    inputRef: RefObject<HTMLInputElement>;
    parentRef: RefObject<HTMLDivElement>;
};
type getPlaceholderProps = {
    withSearch: boolean | undefined;
    withAdd: boolean | undefined;
    hasSelectedOptions: () => boolean;
    multiple: boolean | undefined;
    label: string | undefined;
    placeholder: string | undefined;
    withTags: boolean | undefined;
};
export declare const handleBlurWhenFocusedOnOptionsDiv: ({ isOpen, multiple, showSearchInput, focus, inputRef, parentRef, }: handleBlurWhenFocusedOnOptionsDivProps) => void;
export declare const getSelectedValues: (value: string | undefined, selectedOptions: CDSOption[], multiple?: boolean) => string | readonly string[] | number | undefined;
export declare const handleClear: (setInputValue: Dispatch<SetStateAction<string>>, clearSearchValue: () => void, clearSelected: () => void, inputRef: RefObject<HTMLInputElement>, onClear?: () => void, multiple?: boolean) => void;
export declare const getPlaceholder: ({ withSearch, withAdd, hasSelectedOptions, multiple, label, placeholder, withTags, }: getPlaceholderProps) => string | undefined;
export {};
