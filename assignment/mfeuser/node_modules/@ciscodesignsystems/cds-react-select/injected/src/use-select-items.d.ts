/// <reference types="react" />
import type { CDSOption, CDSOptionGroup } from './types';
type State = {
    options: CDSOption[];
    selectedOptions: CDSOption[];
    filteredOptions?: CDSOption[] | CDSOptionGroup[];
    groupedOptions?: CDSOptionGroup[];
    hasOptionsGroups?: boolean;
    searchValue?: string;
    multiple?: boolean;
};
declare enum ActionKind {
    SEARCH = "SEARCH",
    REMOVE = "REMOVE",
    CLEAR_SEARCH = "CLEAR_SEARCH",
    SELECT = "SELECT",
    DESELECT = "DESELECT",
    CLEAR_SELECTED = "CLEAR_SELECTED",
    ADD = "ADD",
    UPDATE = "UPDATE"
}
type Action = {
    type: ActionKind;
    payload: string | CDSOption | null | CDSOption[];
};
/**
 * @description useSelectItems handles the interaction of the select component and the data display.
 * @param {State} initialState
 */
export declare const useSelectItems: (initialState: State) => {
    getSelectedOptions: () => CDSOption[];
    selectedOptions: CDSOption[];
    hasOptionsGroups: boolean;
    groupedOptions: CDSOptionGroup[];
    searchValue: string | undefined;
    setSearchValue: (q: string) => void;
    clearSearchValue: () => void;
    updateSelect: (opts: CDSOption[]) => void;
    selectOption: (opt: CDSOption) => void;
    deselectOption: (opt: CDSOption) => void;
    removeOption: (opt: CDSOption) => void;
    clearSelected: () => void;
    options: CDSOption[];
    filteredOptions: CDSOption[] | CDSOptionGroup[] | undefined;
    dispatch: import("react").Dispatch<Action>;
    addOption: (opt: CDSOption) => void;
};
export {};
