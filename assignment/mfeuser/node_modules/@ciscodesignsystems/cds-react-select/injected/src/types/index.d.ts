import type { Dispatch, HTMLAttributes, HTMLProps, MutableRefObject, ReactNode, SetStateAction } from 'react';
import { type ExtendedRefs, type FloatingContext, type Strategy } from '@floating-ui/react';
import type { CDSTooltipProps } from '@ciscodesignsystems/cds-react-tooltip';
export declare const CDSSelectSizeArray: readonly ["sm", "md", "lg", "auto"];
export type CDSSelectSize = (typeof CDSSelectSizeArray)[number];
export type CDSOption = {
    /**
     * Whether to show a divider for the option
     *
     * @default false
     */
    divider?: boolean;
    /**
     * An optional icon for the option
     *
     * @default undefined
     */
    icon?: ReactNode;
    /**
     * The option label
     *
     * @default undefined
     */
    label?: string;
    /**
     * The option value
     *
     * @default undefined
     */
    value?: string;
    /**
     * A suggestion for the option in typeahead.
     * **This is an internal prop, used by the typeahead mechanism.**
     *
     * @default undefined
     */
    suggestion?: string;
    tooltip?: Omit<CDSTooltipProps, 'children'>;
    selected?: boolean;
    /**
     * The option disabled state
     *
     * @default false
     */
    disabled?: boolean;
    /**
     * Custom HTML attributes to add to option element.
     * (`role`, `onClick`, `onKeyDown`, `tabIndex`) will not override.
     *
     * @default undefined
     */
    attrs?: HTMLAttributes<any>;
};
export type CDSOptionGroup = {
    /**
     * The selected state for the options group
     *
     * @default false
     */
    selected?: boolean;
    /**
     * The disabled state for the options group
     *
     * @default false
     */
    disabled?: boolean;
    /** The label for the options group */
    label: string;
    /** The options to be displayed in the options group */
    options: CDSOption[];
};
export type SelectProps = {
    /**
     * Whether an * is displayed and input is required.
     * @default false
     */
    required?: boolean;
    /**
     * An optional label for the select. Accepts string.
     * @default undefined
     */
    optional?: boolean;
    /**
     * Whether a clear icon is displayed to clear all selected items.
     */
    clearable?: boolean;
    /**
     * Whether disabled select.
     */
    disabled?: boolean;
    /**
     * Whether the select is in error state.
     */
    error?: boolean;
    /**
     * Message when the select is in error state.
     */
    errorMessage?: string;
    /**
     * Message the select displays for information icon.
     */
    infoMessage?: string;
    /**
     * The icon to render inside the select trigger.
     */
    icon?: ReactNode;
    /**
     * Whether select is open.
     */
    isOpen?: boolean;
    /**
     * Called when select an option or input value change.
     * @param {Option} value
     */
    onChange?(value: CDSOption | CDSOption[]): void;
    /**
     * Called when select menu is toggled open/closed.
     * @param {boolean} open
     */
    onToggle?(open: boolean): void;
    /**
     * The options available for select.
     */
    options: CDSOption[] | CDSOptionGroup[];
    /**
     * The placeholder of the select.
     */
    placeholder?: string;
    /**
     * Size of the select.
     * Accepts sm, md.
     */
    size?: CDSSelectSize;
    /**
     * The tabindex for the select.
     */
    tabindex?: number;
    /**
     * The default value for the select.
     */
    value?: string;
    /**
     * The message when no search results found.
     */
    emptyStateMessage?: string;
};
export type UseFloatingSelect = {
    context: FloatingContext;
    getItemProps: (userProps?: HTMLProps<HTMLElement> | undefined) => Record<string, unknown>;
    getFloatingProps: (userProps?: HTMLProps<HTMLElement> | undefined) => Record<string, unknown>;
    getReferenceProps: (userProps?: HTMLProps<Element> | undefined) => Record<string, unknown>;
    refs: ExtendedRefs<Element>;
    listRef: MutableRefObject<Array<HTMLElement | null>>;
    strategy: Strategy;
    x: number | null;
    y: number | null;
    activeIndex?: number | null;
    selectedIndex?: number | null;
    setSelectedIndex?: Dispatch<SetStateAction<number | null>>;
};
