import { type ComponentPropsWithRef } from 'react';
import type { CDSOption, SelectProps } from './types';
export interface CDSSelectProps extends SelectProps, Omit<ComponentPropsWithRef<'div'>, 'onChange'> {
    /**
     * The form label for the select.
     */
    label?: string;
    /**
     * Whether to enable multiple selected options.
     */
    multiple?: boolean;
    /**
     * Adds a check mark next to the selected options.
     */
    withCheck?: boolean;
    /**
     * Enables filtering of select options based on input value.
     */
    withSearch?: boolean;
    /**
     * Enables multiple selected options to be displayed as tags.
     */
    withTags?: boolean;
    /**
     * Enables an "Add" button for item not matching search.
     */
    withAdd?: boolean;
    /**
     * Enables Typeahead matching search.
     */
    withTypeahead?: boolean;
    /**
     * The name for the select.
     */
    name?: string;
    /**
     * Called when search input is changed.
     * @param {string} value The search string
     */
    onSearch?: (value: string) => void;
    /**
     * Called when select value is cleared.
     */
    onClear?: () => void;
    /**
     * Called when select is toggled open/closed.
     * @param {boolean} value The state of the toggle
     */
    onToggle?: (value: boolean) => void;
    /**
     * Called when blur.
     */
    onBlur?: (event?: React.FocusEvent<HTMLDivElement | HTMLInputElement>) => void;
    /**
     * Called when add button is pressed.
     * @param {CDSOption} value The option that was added.
     */
    onAdd?: (value: CDSOption) => void;
    /**
     * Called when remove tag button is pressed.
     * @param {CDSOption} value The option that was removed.
     */
    onRemove?: (value: CDSOption) => void;
    /**
     * Controls whether the tag is truncated. If a number is provided,
     * it specifies the maximum length of the text before truncation.
     */
    withTruncatedTags?: boolean | number;
}
export declare const getTooltipLabel: (selectedOptions: CDSOption[], multiple?: boolean) => string;
export declare const getSelectedLabels: (selectedOptions: CDSOption[], multiple?: boolean) => string | readonly string[] | undefined;
export declare const CDSSelect: import("react").ForwardRefExoticComponent<Omit<CDSSelectProps, "ref"> & import("react").RefAttributes<HTMLDivElement>>;
export default CDSSelect;
