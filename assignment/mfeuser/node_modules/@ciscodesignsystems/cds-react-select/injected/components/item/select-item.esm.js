import { forwardRef } from 'react';
import { Check } from 'phosphor-react';
import { cx } from '@ciscodesignsystems/cds-component-utilities';
import { CDSCheckbox } from '@ciscodesignsystems/cds-react-checkbox/injected';
import { CDSTooltip } from '@ciscodesignsystems/cds-react-tooltip/injected';
import styles from './select-item.module.esm.js';
import { jsxs, jsx } from 'react/jsx-runtime';

const CDSSelectItem = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    option,
    size,
    multiple,
    withCheck,
    onSelect,
    ...rest
  } = props;
  const {
    label,
    divider,
    disabled,
    selected,
    icon,
    suggestion,
    tooltip,
    attrs
  } = option;
  const showTooltip = multiple && disabled && tooltip;
  function handleSelect(option) {
    if (disabled || disabled && tooltip) {
      return;
    }
    onSelect?.(option);
  }
  const itemContent = /*#__PURE__*/jsxs("div", {
    className: cx(styles, 'cds-select__item-content'),
    role: "none",
    children: [icon && /*#__PURE__*/jsx("span", {
      className: cx(styles, 'cds-select__item-icon'),
      children: icon
    }), /*#__PURE__*/jsx("span", {
      title: label?.toString(),
      className: cx(styles, 'cds-select__item-label'),
      role: "presentation",
      children: suggestion ? /*#__PURE__*/jsx("span", {
        dangerouslySetInnerHTML: {
          __html: suggestion
        }
      }) : label
    }), (selected && !multiple || selected && withCheck) && /*#__PURE__*/jsx("span", {
      className: cx(styles, 'cds-select__item-check'),
      children: /*#__PURE__*/jsx(Check, {
        size: 18
      })
    })]
  });
  return /*#__PURE__*/jsxs("div", {
    ref: ref,
    ...attrs,
    className: cx(styles, 'cds-select__item', attrs?.className, {
      'cds-select__item--selected': selected,
      'cds-select__item--disabled': disabled,
      'cds-select__item--divider': divider,
      'cds-select__item--tooltip': showTooltip,
      [`cds-select__item--${size}`]: size
    }),
    role: "option",
    "aria-selected": selected,
    tabIndex: -1,
    onClick: () => {
      handleSelect(option);
    },
    onKeyDown: event => {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        handleSelect(option);
      }
    },
    ...rest,
    children: [multiple && !withCheck && /*#__PURE__*/jsx("div", {
      className: cx(styles, 'cds-select__item-checkbox'),
      children: showTooltip ? /*#__PURE__*/jsx(CDSTooltip, {
        title: tooltip?.title,
        autoPlacement: tooltip?.autoPlacement,
        showArrow: tooltip?.showArrow,
        variant: tooltip?.variant,
        placement: tooltip?.placement,
        disabled: tooltip?.disabled,
        children: /*#__PURE__*/jsx(CDSCheckbox, {
          disabled: disabled,
          "data-testid": 'cds-select-item-checkbox',
          size: size,
          readOnly: true,
          checked: selected,
          tabIndex: -1
        })
      }) : /*#__PURE__*/jsx(CDSCheckbox, {
        disabled: disabled,
        "data-testid": 'cds-select-item-checkbox',
        size: size,
        readOnly: true,
        checked: selected,
        tabIndex: -1
      })
    }), itemContent]
  });
});
CDSSelectItem.displayName = 'CDSSelectItem';
CDSSelectItem.defaultProps = {
  selected: false,
  multiple: false,
  disabled: false,
  size: 'md',
  onSelect: undefined,
  withCheck: false
};

export { CDSSelectItem, CDSSelectItem as default };
