const tabIndex = withSearch => !withSearch ? {
  tabIndex: -1
} : {};
const handleBlurWhenFocusedOnOptionsDiv = ({
  isOpen,
  multiple,
  showSearchInput,
  focus,
  inputRef,
  parentRef
}) => {
  if (!isOpen && (multiple || showSearchInput) && focus.triggerManualFocus) {
    focus.triggerManualFocus = false;
    const displayRef = showSearchInput ? {
      ...inputRef
    } : {
      ...parentRef
    };
    setTimeout(() => {
      if (document.activeElement !== displayRef.current) {
        displayRef.current?.focus();
        displayRef.current?.blur();
      }
    });
  }
};
const getSelectedValues = (value, selectedOptions, multiple) => {
  if (value && selectedOptions?.length === 0) {
    return value;
  }
  return selectedOptions?.map(option => {
    return option.value;
  }).join(multiple ? ',' : '');
};
const handleClear = (setInputValue, clearSearchValue, clearSelected, inputRef, onClear, multiple) => {
  setInputValue('');
  clearSearchValue();
  if (!multiple) {
    clearSelected();
  }
  if (inputRef.current && 'focus' in inputRef.current) {
    inputRef.current.focus();
  }
  onClear?.();
};
const getPlaceholder = ({
  withSearch,
  withAdd,
  hasSelectedOptions,
  multiple,
  label,
  placeholder,
  withTags
}) => {
  if ((withSearch || withAdd) && hasSelectedOptions() && !multiple) return '';
  if (!withTags && label && multiple && hasSelectedOptions()) {
    return label;
  }
  return placeholder;
};

export { getPlaceholder, getSelectedValues, handleBlurWhenFocusedOnOptionsDiv, handleClear, tabIndex };
