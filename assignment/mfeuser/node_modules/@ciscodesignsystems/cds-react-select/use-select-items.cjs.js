'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var getOptionsGroups = require('./get-options-groups.cjs.js');

var ActionKind;
(function (ActionKind) {
  ActionKind["SEARCH"] = "SEARCH";
  ActionKind["REMOVE"] = "REMOVE";
  ActionKind["CLEAR_SEARCH"] = "CLEAR_SEARCH";
  ActionKind["SELECT"] = "SELECT";
  ActionKind["DESELECT"] = "DESELECT";
  ActionKind["CLEAR_SELECTED"] = "CLEAR_SELECTED";
  ActionKind["ADD"] = "ADD";
  ActionKind["UPDATE"] = "UPDATE";
})(ActionKind || (ActionKind = {}));
function getSelectedOptions(state) {
  return state.options.filter(option => option.selected ? option : null);
}
function isItemIncludesSearchTerm(item, searchTerm) {
  var _a;
  return (_a = item.label) === null || _a === void 0 ? void 0 : _a.toLowerCase().includes(String(searchTerm).toLowerCase());
}
function getFilteredOptions(state, searchTerm) {
  if (state.hasOptionsGroups && state.groupedOptions) {
    return state.groupedOptions.map(optionGroup => {
      return {
        ...optionGroup,
        options: [...optionGroup.options.filter(item => isItemIncludesSearchTerm(item, searchTerm))]
      };
    });
  }
  return state.options.filter(item => isItemIncludesSearchTerm(item, searchTerm));
}
function getOptionIndex(state, option) {
  return state.options.findIndex(value => {
    return value.label === option.label;
  });
}
function clearSelectedOptions(state) {
  return state.options.map(option => {
    option.selected = false;
    return option;
  });
}
const defaultState = {
  options: [],
  selectedOptions: [],
  filteredOptions: [],
  groupedOptions: [],
  hasOptionsGroups: false,
  searchValue: '',
  multiple: false
};
/**
 * Select items reducer handles the state of the select options,
 * the selected options, filtering options and clearing options.
 * @param state
 * @param action
 */
const reducer = (state, action) => {
  const {
    payload,
    type
  } = action;
  const newState = {
    ...state
  };
  switch (type) {
    case ActionKind.UPDATE:
      {
        const {
          flatOptions,
          groupedOptions,
          hasOptionsGroups
        } = getOptionsGroups.getOptionsGroups(payload);
        newState.options = flatOptions;
        newState.groupedOptions = groupedOptions;
        newState.hasOptionsGroups = hasOptionsGroups;
        newState.selectedOptions = getSelectedOptions(newState);
        return newState;
      }
    case ActionKind.SEARCH:
      if (payload !== ' ') {
        newState.searchValue = payload;
        newState.filteredOptions = getFilteredOptions(state, payload);
      }
      return newState;
    case ActionKind.CLEAR_SEARCH:
      newState.searchValue = '';
      return newState;
    case ActionKind.CLEAR_SELECTED:
      newState.selectedOptions = [];
      newState.options = clearSelectedOptions(state);
      return newState;
    case ActionKind.REMOVE:
      {
        const optionToRemove = payload;
        const optionIndex = getOptionIndex(newState, optionToRemove);
        if (optionIndex !== -1) {
          newState.options[optionIndex].selected = false;
          newState.selectedOptions = getSelectedOptions(newState);
        }
        return newState;
      }
    case ActionKind.DESELECT:
      {
        const optionToDeselect = payload;
        const optionIndex = getOptionIndex(newState, optionToDeselect);
        newState.options[optionIndex].selected = false;
        newState.selectedOptions = getSelectedOptions(newState);
        return newState;
      }
    case ActionKind.SELECT:
      {
        const optionToSelect = payload;
        const optionIndex = getOptionIndex(newState, optionToSelect);
        if (optionIndex !== -1) {
          if (!newState.selectedOptions.some(option => option.label === optionToSelect.label)) {
            newState.options[optionIndex].selected = true;
            newState.selectedOptions = [...newState.selectedOptions, optionToSelect];
          }
        }
        return newState;
      }
    case ActionKind.ADD:
      {
        const optionToAdd = payload;
        if (!newState.options.includes(optionToAdd)) {
          newState.options.push(optionToAdd);
        }
        newState.selectedOptions = getSelectedOptions(newState);
        return newState;
      }
    default:
      return defaultState;
  }
};
function init(state) {
  return {
    ...state,
    selectedOptions: getSelectedOptions(state)
  };
}
/**
 * @description useSelectItems handles the interaction of the select component and the data display.
 * @param {State} initialState
 */
const useSelectItems = initialState => {
  const {
    flatOptions,
    groupedOptions,
    hasOptionsGroups
  } = getOptionsGroups.getOptionsGroups(initialState.options);
  const [state, dispatch] = react.useReducer(reducer, {
    ...initialState,
    options: flatOptions,
    groupedOptions,
    hasOptionsGroups
  }, init);
  const addOption = react.useCallback(opt => {
    dispatch({
      type: ActionKind.ADD,
      payload: opt
    });
  }, []);
  const selectOption = react.useCallback(opt => {
    dispatch({
      type: ActionKind.SELECT,
      payload: opt
    });
  }, []);
  const deselectOption = react.useCallback(opt => {
    dispatch({
      type: ActionKind.DESELECT,
      payload: opt
    });
  }, []);
  const removeOption = react.useCallback(opt => {
    dispatch({
      type: ActionKind.REMOVE,
      payload: opt
    });
  }, []);
  const clearSearchValue = react.useCallback(() => {
    dispatch({
      type: ActionKind.CLEAR_SEARCH,
      payload: ''
    });
  }, []);
  const clearSelected = react.useCallback(() => {
    dispatch({
      type: ActionKind.CLEAR_SELECTED,
      payload: null
    });
  }, []);
  const setSearchValue = react.useCallback(q => {
    dispatch({
      type: ActionKind.SEARCH,
      payload: q
    });
  }, []);
  const updateSelect = react.useCallback(opts => {
    dispatch({
      type: ActionKind.UPDATE,
      payload: opts
    });
  }, []);
  const {
    options,
    selectedOptions,
    filteredOptions,
    searchValue
  } = state;
  const _getSelectedOptions = () => {
    return getSelectedOptions(state);
  };
  return {
    getSelectedOptions: _getSelectedOptions,
    selectedOptions,
    hasOptionsGroups,
    groupedOptions,
    searchValue,
    setSearchValue,
    clearSearchValue,
    updateSelect,
    selectOption,
    deselectOption,
    removeOption,
    clearSelected,
    options,
    filteredOptions,
    dispatch,
    addOption
  };
};

exports.useSelectItems = useSelectItems;
