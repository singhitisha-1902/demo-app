'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var phosphorReact = require('phosphor-react');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var cdsReactCheckbox = require('@ciscodesignsystems/cds-react-checkbox');
var cdsReactTooltip = require('@ciscodesignsystems/cds-react-tooltip');
var selectItem_module = require('./select-item.module.cjs.js');

const CDSSelectItem = /*#__PURE__*/react.forwardRef((props, ref) => {
  const {
    option,
    size,
    multiple,
    withCheck,
    onSelect,
    ...rest
  } = props;
  const {
    label,
    divider,
    disabled,
    selected,
    icon,
    suggestion,
    tooltip,
    attrs
  } = option;
  const showTooltip = multiple && disabled && tooltip;
  function handleSelect(option) {
    if (disabled || disabled && tooltip) {
      return;
    }
    onSelect === null || onSelect === void 0 ? void 0 : onSelect(option);
  }
  const itemContent = jsxRuntime.jsxs("div", {
    className: cdsComponentUtilities.cx(selectItem_module["default"], 'cds-select__item-content'),
    role: "none",
    children: [icon && jsxRuntime.jsx("span", {
      className: cdsComponentUtilities.cx(selectItem_module["default"], 'cds-select__item-icon'),
      children: icon
    }), jsxRuntime.jsx("span", {
      title: label === null || label === void 0 ? void 0 : label.toString(),
      className: cdsComponentUtilities.cx(selectItem_module["default"], 'cds-select__item-label'),
      role: "presentation",
      children: suggestion ? jsxRuntime.jsx("span", {
        dangerouslySetInnerHTML: {
          __html: suggestion
        }
      }) : label
    }), (selected && !multiple || selected && withCheck) && jsxRuntime.jsx("span", {
      className: cdsComponentUtilities.cx(selectItem_module["default"], 'cds-select__item-check'),
      children: jsxRuntime.jsx(phosphorReact.Check, {
        size: 18
      })
    })]
  });
  return jsxRuntime.jsxs("div", {
    ref: ref,
    ...attrs,
    className: cdsComponentUtilities.cx(selectItem_module["default"], 'cds-select__item', attrs === null || attrs === void 0 ? void 0 : attrs.className, {
      'cds-select__item--selected': selected,
      'cds-select__item--disabled': disabled,
      'cds-select__item--divider': divider,
      'cds-select__item--tooltip': showTooltip,
      [`cds-select__item--${size}`]: size
    }),
    role: "option",
    "aria-selected": selected,
    tabIndex: -1,
    onClick: () => {
      handleSelect(option);
    },
    onKeyDown: event => {
      if (event.key === 'Enter' || event.key === ' ') {
        event.preventDefault();
        handleSelect(option);
      }
    },
    ...rest,
    children: [multiple && !withCheck && jsxRuntime.jsx("div", {
      className: cdsComponentUtilities.cx(selectItem_module["default"], 'cds-select__item-checkbox'),
      children: showTooltip ? jsxRuntime.jsx(cdsReactTooltip.CDSTooltip, {
        title: tooltip === null || tooltip === void 0 ? void 0 : tooltip.title,
        autoPlacement: tooltip === null || tooltip === void 0 ? void 0 : tooltip.autoPlacement,
        showArrow: tooltip === null || tooltip === void 0 ? void 0 : tooltip.showArrow,
        variant: tooltip === null || tooltip === void 0 ? void 0 : tooltip.variant,
        placement: tooltip === null || tooltip === void 0 ? void 0 : tooltip.placement,
        disabled: tooltip === null || tooltip === void 0 ? void 0 : tooltip.disabled,
        children: jsxRuntime.jsx(cdsReactCheckbox.CDSCheckbox, {
          disabled: disabled,
          "data-testid": 'cds-select-item-checkbox',
          size: size,
          readOnly: true,
          checked: selected,
          tabIndex: -1
        })
      }) : jsxRuntime.jsx(cdsReactCheckbox.CDSCheckbox, {
        disabled: disabled,
        "data-testid": 'cds-select-item-checkbox',
        size: size,
        readOnly: true,
        checked: selected,
        tabIndex: -1
      })
    }), itemContent]
  });
});
CDSSelectItem.displayName = 'CDSSelectItem';
CDSSelectItem.defaultProps = {
  selected: false,
  multiple: false,
  disabled: false,
  size: 'md',
  onSelect: undefined,
  withCheck: false
};

exports.CDSSelectItem = CDSSelectItem;
exports["default"] = CDSSelectItem;
