'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var react = require('react');
var react$1 = require('@floating-ui/react');

const useFloatingSelect = (isOpen, onToggle) => {
  const [activeIndex, setActiveIndex] = react.useState(null);
  const [selectedIndex, setSelectedIndex] = react.useState(null);
  const {
    context,
    refs,
    strategy,
    x,
    y
  } = react$1.useFloating({
    open: isOpen,
    onOpenChange: onToggle,
    middleware: [react$1.offset(4), react$1.size({
      apply: ({
        availableHeight,
        elements,
        rects
      }) => {
        Object.assign(elements.floating.style, {
          width: `${rects.reference.width}px`,
          maxHeight: `${Math.max(150, availableHeight)}px`
        });
      }
    }), react$1.flip(), react$1.shift()],
    whileElementsMounted: react$1.autoUpdate
  });
  const listRef = react.useRef([]);
  const click = react$1.useClick(context);
  const dismiss = react$1.useDismiss(context, {
    outsidePressEvent: 'click'
  });
  const role = react$1.useRole(context, {
    role: 'listbox'
  });
  const listNav = react$1.useListNavigation(context, {
    listRef,
    activeIndex,
    selectedIndex,
    onNavigate: setActiveIndex,
    loop: true,
    openOnArrowKeyDown: true
  });
  const {
    getFloatingProps,
    getReferenceProps,
    getItemProps
  } = react$1.useInteractions([click, dismiss, role, listNav]);
  return {
    context,
    refs,
    strategy,
    x,
    y,
    getItemProps,
    getFloatingProps,
    getReferenceProps,
    listRef,
    activeIndex,
    selectedIndex,
    setSelectedIndex
  };
};

exports.useFloatingSelect = useFloatingSelect;
