import { type ComponentPropsWithRef, type MouseEventHandler } from 'react';
import type { CDSDrawerSize } from './types';
export interface CDSDrawerProps extends ComponentPropsWithRef<'div'> {
    /**
     * To push the page content aside
     */
    affectsLayout?: boolean;
    /**
     * Open state for the drawer
     */
    isOpen?: boolean;
    /**
     * Function that will be called while closing the drawer
     */
    onClose?: MouseEventHandler<HTMLButtonElement>;
    /**
     * Function that will be called while opening the drawer
     */
    onOpen?: MouseEventHandler<HTMLButtonElement>;
    /**
     * To show/hide the drawer sticky button
     */
    showStickyButton?: boolean;
    /**
     * Size of the drawer to display
     */
    size?: CDSDrawerSize | number;
    /**
     * This will preserve the tab order context based on the React tree instead of the DOM tree
     */
    preserveTabOrder?: boolean;
    /**
     * Optionally specifies the root node the portal container will be appended to
     */
    root?: HTMLElement | null;
}
declare const CDSDrawerGroup: import("react").ForwardRefExoticComponent<Omit<CDSDrawerProps, "ref"> & import("react").RefAttributes<HTMLDivElement>> & {
    Heading: {
        ({ children, className, ...rest }: import("@ciscodesignsystems/cds-react-flex").CDSFlexProps): import("react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    Content: {
        ({ children, className, ...rest }: Omit<import("react").DetailedHTMLProps<import("react").HTMLAttributes<HTMLDivElement>, HTMLDivElement>, "ref">): import("react/jsx-runtime").JSX.Element;
        displayName: string;
    };
    Footer: {
        ({ children, className, ...rest }: import("@ciscodesignsystems/cds-react-flex").CDSFlexProps): import("react/jsx-runtime").JSX.Element;
        displayName: string;
    };
};
export { CDSDrawerGroup as CDSDrawer };
export default CDSDrawerGroup;
