'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var jsxRuntime = require('react/jsx-runtime');
var react = require('react');
var react$1 = require('@floating-ui/react');
var framerMotion = require('framer-motion');
var phosphorReact = require('phosphor-react');
var cdsComponentTypes = require('@ciscodesignsystems/cds-component-types');
var cdsComponentUtilities = require('@ciscodesignsystems/cds-component-utilities');
var cdsReactFlex = require('@ciscodesignsystems/cds-react-flex');
var index = require('./components/heading/index.cjs.js');
var index$1 = require('./components/content/index.cjs.js');
var index$2 = require('./components/footer/index.cjs.js');
var index$4 = require('./util/animation/index.cjs.js');
var index$3 = require('./util/context/index.cjs.js');
var drawer_module = require('./drawer.module.cjs.js');

const CDSDrawer = /*#__PURE__*/react.forwardRef((props, ref) => {
  const {
    affectsLayout,
    children,
    className,
    isOpen,
    onClose,
    onOpen,
    showStickyButton,
    size,
    preserveTabOrder,
    root,
    ...rest
  } = props;
  const {
    context,
    refs
  } = react$1.useFloating();
  const role = react$1.useRole(context);
  const {
    getFloatingProps
  } = react$1.useInteractions([role]);
  const computedDrawerClassName = cdsComponentUtilities.cx(drawer_module["default"], 'cds-drawer', {
    'cds-drawer--affects-layout': affectsLayout,
    [`cds-drawer--affects-layout--${size}`]: typeof size === 'string' && isOpen && affectsLayout
  });
  const computedContainerClassName = cdsComponentUtilities.cx(drawer_module["default"], 'cds-drawer__container', className);
  const contextValue = react.useMemo(() => ({
    onClose,
    isOpen
  }), [isOpen, onClose]);
  const animationStyle = react.useMemo(() => typeof size === 'number' ? {
    width: size
  } : {}, [size]);
  const drawerStyle = react.useMemo(() => typeof size === 'number' && isOpen && affectsLayout ? {
    minWidth: size
  } : {}, [isOpen, size, affectsLayout]);
  const animationClasses = cdsComponentUtilities.cx(drawer_module["default"], 'cds-drawer__animation', {
    [`cds-drawer__animation--${size}`]: typeof size === 'string'
  });
  const floatingPortalWrapper = react.useCallback(children => jsxRuntime.jsx(react$1.FloatingPortal, {
    preserveTabOrder: preserveTabOrder,
    ...(root ? {
      root
    } : {}),
    children: children
  }), [preserveTabOrder, root]);
  return jsxRuntime.jsx(index$3.DrawerContext.Provider, {
    value: contextValue,
    children: jsxRuntime.jsx(cdsComponentTypes.ConditionalWrap, {
      condition: !affectsLayout,
      wrap: children => floatingPortalWrapper(children),
      children: jsxRuntime.jsxs("div", {
        className: computedDrawerClassName,
        style: drawerStyle,
        children: [showStickyButton && jsxRuntime.jsx("button", {
          "aria-label": "Open Drawer",
          className: cdsComponentUtilities.cx(drawer_module["default"], 'cds-drawer__sticky-button'),
          type: "button",
          onClick: onOpen,
          children: jsxRuntime.jsx(phosphorReact.CaretLeft, {
            size: 20,
            weight: "bold"
          })
        }), jsxRuntime.jsx(framerMotion.AnimatePresence, {
          children: isOpen && jsxRuntime.jsx(framerMotion.motion.div, {
            animate: "show",
            className: animationClasses,
            exit: "hidden",
            initial: "hidden",
            variants: index$4.variantObj,
            style: animationStyle,
            ...(!affectsLayout ? {
              ref: refs.setFloating,
              ...getFloatingProps()
            } : {}),
            children: jsxRuntime.jsx("div", {
              className: computedContainerClassName,
              ref: ref,
              ...rest,
              children: jsxRuntime.jsx(cdsReactFlex.CDSFlex, {
                className: cdsComponentUtilities.cx(drawer_module["default"], 'cds-drawer__container__flex'),
                direction: "vertical",
                gap: "sm",
                children: children
              })
            })
          })
        })]
      })
    })
  });
});
CDSDrawer.displayName = 'CDSDrawer';
CDSDrawer.defaultProps = {
  affectsLayout: false,
  isOpen: false,
  onClose: undefined,
  onOpen: undefined,
  showStickyButton: false,
  size: 'sm',
  preserveTabOrder: true,
  root: null
};
const CDSDrawerGroup = Object.assign(CDSDrawer, {
  Heading: index.CDSDrawerHeading,
  Content: index$1.CDSDrawerContent,
  Footer: index$2.CDSDrawerFooter
});
CDSDrawerGroup.displayName = 'CDSDrawer';

exports.CDSDrawer = CDSDrawerGroup;
exports["default"] = CDSDrawerGroup;
