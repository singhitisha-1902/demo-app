import { forwardRef, useMemo, useCallback } from 'react';
import { useFloating, useRole, useInteractions, FloatingPortal } from '@floating-ui/react';
import { AnimatePresence, motion } from 'framer-motion';
import { CaretLeft } from 'phosphor-react';
import { ConditionalWrap } from '@ciscodesignsystems/cds-component-types';
import { cx } from '@ciscodesignsystems/cds-component-utilities';
import { CDSFlex } from '@ciscodesignsystems/cds-react-flex';
import { variantObj } from './util/animation/index.esm.js';
import { DrawerContext } from './util/context/index.esm.js';
import styles from './drawer.module.esm.js';
import { jsx, jsxs } from 'react/jsx-runtime';
import { CDSDrawerHeading } from './components/heading/index.esm.js';
import { CDSDrawerContent } from './components/content/index.esm.js';
import { CDSDrawerFooter } from './components/footer/index.esm.js';

const CDSDrawer = /*#__PURE__*/forwardRef((props, ref) => {
  const {
    affectsLayout,
    children,
    className,
    isOpen,
    onClose,
    onOpen,
    showStickyButton,
    size,
    preserveTabOrder,
    root,
    ...rest
  } = props;
  const {
    context,
    refs
  } = useFloating();
  const role = useRole(context);
  const {
    getFloatingProps
  } = useInteractions([role]);
  const computedDrawerClassName = cx(styles, 'cds-drawer', {
    'cds-drawer--affects-layout': affectsLayout,
    [`cds-drawer--affects-layout--${size}`]: typeof size === 'string' && isOpen && affectsLayout
  });
  const computedContainerClassName = cx(styles, 'cds-drawer__container', className);
  const contextValue = useMemo(() => ({
    onClose,
    isOpen
  }), [isOpen, onClose]);
  const animationStyle = useMemo(() => typeof size === 'number' ? {
    width: size
  } : {}, [size]);
  const drawerStyle = useMemo(() => typeof size === 'number' && isOpen && affectsLayout ? {
    minWidth: size
  } : {}, [isOpen, size, affectsLayout]);
  const animationClasses = cx(styles, 'cds-drawer__animation', {
    [`cds-drawer__animation--${size}`]: typeof size === 'string'
  });
  const floatingPortalWrapper = useCallback(children => /*#__PURE__*/jsx(FloatingPortal, {
    preserveTabOrder: preserveTabOrder,
    ...(root ? {
      root
    } : {}),
    children: children
  }), [preserveTabOrder, root]);
  return /*#__PURE__*/jsx(DrawerContext.Provider, {
    value: contextValue,
    children: /*#__PURE__*/jsx(ConditionalWrap, {
      condition: !affectsLayout,
      wrap: children => floatingPortalWrapper(children),
      children: /*#__PURE__*/jsxs("div", {
        className: computedDrawerClassName,
        style: drawerStyle,
        children: [showStickyButton && /*#__PURE__*/jsx("button", {
          "aria-label": "Open Drawer",
          className: cx(styles, 'cds-drawer__sticky-button'),
          type: "button",
          onClick: onOpen,
          children: /*#__PURE__*/jsx(CaretLeft, {
            size: 20,
            weight: "bold"
          })
        }), /*#__PURE__*/jsx(AnimatePresence, {
          children: isOpen && /*#__PURE__*/jsx(motion.div, {
            animate: "show",
            className: animationClasses,
            exit: "hidden",
            initial: "hidden",
            variants: variantObj,
            style: animationStyle,
            ...(!affectsLayout ? {
              ref: refs.setFloating,
              ...getFloatingProps()
            } : {}),
            children: /*#__PURE__*/jsx("div", {
              className: computedContainerClassName,
              ref: ref,
              ...rest,
              children: /*#__PURE__*/jsx(CDSFlex, {
                className: cx(styles, 'cds-drawer__container__flex'),
                direction: "vertical",
                gap: "sm",
                children: children
              })
            })
          })
        })]
      })
    })
  });
});
CDSDrawer.displayName = 'CDSDrawer';
CDSDrawer.defaultProps = {
  affectsLayout: false,
  isOpen: false,
  onClose: undefined,
  onOpen: undefined,
  showStickyButton: false,
  size: 'sm',
  preserveTabOrder: true,
  root: null
};
const CDSDrawerGroup = Object.assign(CDSDrawer, {
  Heading: CDSDrawerHeading,
  Content: CDSDrawerContent,
  Footer: CDSDrawerFooter
});
CDSDrawerGroup.displayName = 'CDSDrawer';

export { CDSDrawerGroup as CDSDrawer, CDSDrawerGroup as default };
