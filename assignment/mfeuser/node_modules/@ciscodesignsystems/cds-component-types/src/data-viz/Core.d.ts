import type { FunctionComponent, JSX } from 'react';
import type { DatumValue } from '@nivo/core';
import type { LegendProps } from '@nivo/legends';
import { type Datum, type Serie } from '@nivo/line';
import type { CDSChartAxesProp, CDSChartTheme } from './';
export type PlotDatumValue = number | string | Date;
export type PlotDatumBarValue = number | string;
export type PlotDatumValues = number[] | string[] | Date[];
export interface PlotDatum {
    x: PlotDatumValue | PlotDatumBarValue;
    y: PlotDatumValue | PlotDatumBarValue | null;
}
export type MinMaxAuto = number | 'auto' | string;
export type Orientation = 'bottom' | 'left';
export type Position = 'middle' | 'top' | 'bottom';
export type Anchor = 'bottom-right' | 'bottom-left' | 'bottom-middle' | 'top-right' | 'top-left' | 'top-middle';
export type Direction = 'column' | 'row';
export type ItemDirection = 'left-to-right' | 'right-to-left';
export type Shape = 'circle' | 'square' | 'diamond';
export interface CoreChartProps<D> {
    /** Configurable Axes object */
    axes?: CDSChartAxesProp;
    /** Whether to render the chart as a `<Canvas />` element. Defaults to false, rendering in SVG */
    canvas?: boolean;
    /** Color for the chart line */
    colors?: string[];
    /** Chart data */
    data: D;
    /** Size of font in axis labels */
    fontSize?: number;
    /** Whether to show the X grid */
    gridX?: boolean;
    /** Whether to show the Y grid */
    gridY?: boolean;
    /** Height of chart in px */
    height?: number;
    /** Width of chart in px */
    width?: number;
    /** Configurable Legends object */
    legends?: LegendProps[];
    /** Customizable and overridable chart theme. */
    theme?: Partial<CDSChartTheme>;
    /** Height for responsive chart.  */
    fluidHeight?: number;
}
export interface LineChartData {
    data: PlotDatum[];
    id: string | number;
}
export interface SlicesType {
    axis: object;
    debug: boolean;
    height: number;
    tooltip: object;
    current: object;
    setCurrent: (point: PointProp | null) => void;
    x: number;
    points: SeriePointProp[];
}
export interface PointProp {
    x: number;
    y: number;
    id: string;
    color?: string;
}
export interface SeriePointData {
    x: number;
    xFormatted: string;
    y: number;
    yFormatted: string;
}
export interface SeriePointProp {
    x: number;
    y: number;
    color: string;
    borderColor: string;
    id: string;
    index: number;
    serieColor: string;
    serieId: string;
    data: SeriePointData;
}
export interface CustomPointProp {
    currentPoint: PointProp;
    enableSlices: boolean;
    slices: SlicesType[];
}
export interface MarginProp {
    top: number;
    right: number;
    bottom: number;
    left: number;
}
export interface CustomMeshProp {
    points: PointProp[];
    width: number;
    height: number;
    margin: MarginProp;
    setCurrentPoint: (point: PointProp | null) => void;
    onMouseEnter: (point: PointProp, event: React.MouseEvent) => void;
    onMouseMove: (point: PointProp, event: React.MouseEvent) => void;
    onMouseLeave: (point: PointProp, event: React.MouseEvent) => void;
    onClick: (point: PointProp, event: React.MouseEvent) => void;
    tooltip: FunctionComponent;
    sliceTooltip: FunctionComponent;
    debug: boolean;
    enableSlices: boolean;
    slices: SlicesType[];
    useMesh: boolean;
    xScale: (x: number) => number;
    isInteractive: boolean;
}
export type TooltipAnchor = 'top' | 'right' | 'bottom' | 'left' | 'center';
export interface HandleMouseEventProp {
    width: number;
    margin: MarginProp;
    enableSlices: boolean;
    tooltip: FunctionComponent;
    onMouseEnter: (point: PointProp, event: React.MouseEvent) => void;
    setCurrentPoint: (point: PointProp) => void;
    sliceTooltip: FunctionComponent;
    slices: SlicesType[];
    onMouseMove: (point: PointProp, event: React.MouseEvent) => void;
    point: PointProp;
    showTooltipAt: (content: JSX.Element, position: [number, number], anchor?: TooltipAnchor) => void;
    event: React.MouseEvent;
    leftSideOffsetFactor: number;
    rightSideOffsetFactor: number;
}
export interface SliceTooltipSliceProps {
    points: [];
}
export interface CDSLineProps {
    areaBaselineValue: number;
    lineGenerator: (data: Datum[]) => string;
    series: Serie[];
    xScale: (x: number) => number;
    yScale: (y: number) => number;
}
export interface MouseHandleEvent extends MouseEvent {
    offsetX: number;
    offsetY: number;
    x: number;
    y: number;
}
export type MouseHandler<Datum> = (datum: Datum, event: React.MouseEvent) => void;
export interface LineChartData {
    color: string;
    data: PlotDatum[];
    id: string | number;
}
export interface CDSLineChartCustomTooltipProps {
    color: string;
    data: {
        x: number | DatumValue;
        yFormatted: string | number;
    };
    serieId: string | number;
    duration?: number;
}
