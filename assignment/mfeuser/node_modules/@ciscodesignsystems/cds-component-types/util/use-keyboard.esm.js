import { useEffect } from 'react';

/**
 * A hook that will introduce a customizable keyboard event listener which fires a specific callback.
 *
 * @param callback The event that will get fired when the keyboard event is fired.
 * @param options A set of options that allows for customization of the behaviour that's attached to the event listener.
 */
const useKeyboard = (callback, options = {}) => {
  const {
    keys,
    type = 'keyup'
  } = options;
  return useEffect(() => {
    const listener = event => {
      if (!keys || keys.includes(event.key)) {
        callback();
      }
    };
    document.addEventListener(type, listener);
    return () => document.removeEventListener(type, listener);
  }, [callback, keys, type]);
};

export { useKeyboard };
