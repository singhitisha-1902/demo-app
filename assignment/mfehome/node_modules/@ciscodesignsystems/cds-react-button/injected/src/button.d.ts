import { type ElementType, type FC, type ReactElement, type ReactNode } from 'react';
import { type PolymorphicComponentPropWithRef } from '@ciscodesignsystems/cds-component-types';
import type { CDSButtonSentiment, CDSButtonSize, CDSButtonVariant } from './types';
export type CDSButtonProps<C extends ElementType = 'button'> = PolymorphicComponentPropWithRef<C, {
    /**
     * The variant of the button to render
     */
    variant?: CDSButtonVariant;
    /**
     * The sentiment of the button to render
     */
    sentiment?: CDSButtonSentiment;
    /**
     * The destructive button flag that indicates that a buttonâ€™s actions are risky
     */
    destructive?: boolean;
    /**
     * The size of the button to render
     */
    size?: CDSButtonSize;
    /**
     * Display the button in a full-width block
     */
    block?: boolean;
    /**
     * An icon that will be rendered on the left side of the button
     */
    icon?: ReactNode;
    /**
     * An icon that will be rendered on the right side of the button
     */
    rightIcon?: ReactNode;
    /**
     * Shows a spinner in place of the left icon and disables the button
     */
    loading?: boolean;
}>;
type CDSButtonComponent = FC & (<C extends ElementType = 'button'>(props: CDSButtonProps<C>) => ReactElement | null);
declare const CDSButton: CDSButtonComponent;
declare const CDSButtonNamespace: FC & (<C extends ElementType = "button">(props: CDSButtonProps<C>) => ReactElement | null) & {
    Group: FC & (<C_1 extends ElementType = "div">(props: import("./components/button-group/button-group").CDSButtonGroupProps<C_1>) => ReactElement<any, string | import("react").JSXElementConstructor<any>> | null);
};
export default CDSButton;
export { CDSButtonNamespace as CDSButton };
