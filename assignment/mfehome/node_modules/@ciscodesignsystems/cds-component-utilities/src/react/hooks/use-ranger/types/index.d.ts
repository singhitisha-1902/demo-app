import type { CSSProperties, ComponentPropsWithoutRef, Key, MouseEvent, RefObject, TouchEvent } from 'react';
export interface RangerOptions {
    values: number[];
    min: number;
    max: number;
    stepSize: number;
    steps?: number[];
    tickSize?: number;
    ticks?: number[];
    onChange?: (values: number[]) => void;
    onDrag?: (values: number[]) => void;
    interpolator?: {
        getPercentageForValue: (val: number, min: number, max: number) => number;
        getValueForClientX: (clientX: number, trackDims: object, min: number, max: number) => number;
    };
    draggableTrack?: boolean;
}
export interface TrackProps extends ComponentPropsWithoutRef<'div'> {
    key?: Key;
    trackRef?: RefObject<HTMLDivElement>;
    style: CSSProperties;
}
export interface TickProps extends ComponentPropsWithoutRef<'div'> {
    key: Key;
    style: CSSProperties;
}
export interface SegmentProps extends ComponentPropsWithoutRef<'div'> {
    key: Key;
    style: CSSProperties;
}
export interface HandleProps extends ComponentPropsWithoutRef<'button'> {
    key: Key;
    style: CSSProperties;
    onMouseDown: (event: MouseEvent<HTMLButtonElement>) => void;
    onTouchStart: (event: TouchEvent<HTMLButtonElement>) => void;
}
export interface RangerTick {
    value: number;
    getTickProps: (props: Partial<TickProps>) => TickProps;
}
export interface RangerSegment {
    value: number;
    getSegmentProps: (props: Partial<SegmentProps>) => SegmentProps;
}
export interface RangerHandle {
    value: number;
    active: boolean;
    getHandleProps: (props: Partial<HandleProps>) => HandleProps;
}
export interface Ranger {
    getTrackProps: (props: Partial<TrackProps>) => TrackProps;
    tickMarks: RangerTick[];
    segments: RangerSegment[];
    handles: RangerHandle[];
    activeHandleIndex: number | null;
}
