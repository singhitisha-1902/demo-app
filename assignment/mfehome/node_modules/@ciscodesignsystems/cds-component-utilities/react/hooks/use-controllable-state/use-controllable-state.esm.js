import { useState, useCallback } from 'react';

function useControllableState({
  value: valueFromProps = undefined,
  onChange = undefined,
  defaultValue = undefined
}) {
  const isControlled = typeof valueFromProps !== 'undefined';
  const [internalValue, setInternalValue] = useState(defaultValue);
  const value = isControlled ? valueFromProps : internalValue;
  const setValue = useCallback(next => {
    const setter = next;
    const nextValue = typeof next === 'function' ? setter(value) : next;
    if (!isControlled) {
      setInternalValue(nextValue);
    }
    onChange?.(nextValue);
  }, [isControlled, onChange, value]);
  return [value, setValue];
}

export { useControllableState };
