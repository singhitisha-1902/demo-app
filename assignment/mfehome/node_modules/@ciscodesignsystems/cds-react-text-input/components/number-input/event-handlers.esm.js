import Decimal from 'decimal.js';

const handleDecrease = (max, min, step, value) => {
  const hasValue = !!value || value === 0;
  if (!hasValue) {
    return -step;
  }
  if (max && Number(value) > Number(max)) {
    return max;
  }
  const newValue = Decimal.sub(value, step);
  if (min && newValue.lessThan(min)) return value;
  return newValue.toString();
};
const handleIncrease = (max, min, step, value) => {
  const hasValue = !!value || value === 0;
  if (!hasValue) {
    return step;
  }
  if (min && Number(value) < Number(min)) {
    return min;
  }
  const newValue = Decimal.add(value, step);
  if (max && newValue.greaterThan(max)) return value;
  return newValue.toString();
};
const isUpArraowDisabled = (max, value) => {
  const hasValue = !!value || value === 0;
  return hasValue && max && Number(value) >= Number(max);
};
const isDownArraowDisabled = (min, value) => {
  const hasValue = !!value || value === 0;
  return hasValue && min && Number(value) <= Number(min);
};
const handleInputBlurEvent = (numberInputRef, event, onBlur) => {
  if (numberInputRef.current) {
    numberInputRef.current.blur();
  }
  if (onBlur) {
    onBlur(event);
  }
};
const handleInputClickEvent = (numberInputRef, event, onClick) => {
  if (numberInputRef.current) {
    numberInputRef.current.focus();
  }
  if (onClick) {
    onClick(event);
  }
};

export { handleDecrease, handleIncrease, handleInputBlurEvent, handleInputClickEvent, isDownArraowDisabled, isUpArraowDisabled };
