'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Decimal = require('decimal.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var Decimal__default = /*#__PURE__*/_interopDefaultLegacy(Decimal);

const handleDecrease = (max, min, step, value) => {
  const hasValue = !!value || value === 0;
  if (!hasValue) {
    return -step;
  }
  if (max && Number(value) > Number(max)) {
    return max;
  }
  const newValue = Decimal__default["default"].sub(value, step);
  if (min && newValue.lessThan(min)) return value;
  return newValue.toString();
};
const handleIncrease = (max, min, step, value) => {
  const hasValue = !!value || value === 0;
  if (!hasValue) {
    return step;
  }
  if (min && Number(value) < Number(min)) {
    return min;
  }
  const newValue = Decimal__default["default"].add(value, step);
  if (max && newValue.greaterThan(max)) return value;
  return newValue.toString();
};
const isUpArraowDisabled = (max, value) => {
  const hasValue = !!value || value === 0;
  return hasValue && max && Number(value) >= Number(max);
};
const isDownArraowDisabled = (min, value) => {
  const hasValue = !!value || value === 0;
  return hasValue && min && Number(value) <= Number(min);
};
const handleInputBlurEvent = (numberInputRef, event, onBlur) => {
  if (numberInputRef.current) {
    numberInputRef.current.blur();
  }
  if (onBlur) {
    onBlur(event);
  }
};
const handleInputClickEvent = (numberInputRef, event, onClick) => {
  if (numberInputRef.current) {
    numberInputRef.current.focus();
  }
  if (onClick) {
    onClick(event);
  }
};

exports.handleDecrease = handleDecrease;
exports.handleIncrease = handleIncrease;
exports.handleInputBlurEvent = handleInputBlurEvent;
exports.handleInputClickEvent = handleInputClickEvent;
exports.isDownArraowDisabled = isDownArraowDisabled;
exports.isUpArraowDisabled = isUpArraowDisabled;
